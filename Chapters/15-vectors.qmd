---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---


```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "lib"
)
```




# Introducing Vectors and SIMD

In this chapter, I'm going to discuss vectors in Zig, which are
related to SIMD programming.


## What is SIMD?

SIMD (*Single Instruction/Multiple Data*) is a group of operations that are widely used
on video/audio editing, and also in graphics applications. SIMD is not a new technology,
but the massive use of SIMD on normal desktop computers is somewhat new. Previously, SIMD
was used only on supercomputers models.

This means that not every existing CPU (either in a desktop or in a
notebook) these days have support for SIMD operations.
Therefore, not every person can enjoy the benefits of SIMD operations,
depending on the hardware that they have. However, most CPU manufacturers
(AMD, Intel, etc.) have adopted SIMD on their most recent CPU models.
So, if you have a recent CPU model installed in your computer, then, your computer can likely use
SIMD operations.

But why people have started using SIMD on their software? The answer is performance.
SIMD operations is a different way to get parallel computing, and therefore, make
faster calculations.

The basic idea behind SIMD is to have a single instruction that operates over multiple data
at the same time. When you perform a normal scalar operation, like for example, four add instructions,
each addition is performed separately, one after another. But with SIMD, these four add instructions
are translated into a single instruction, and, as consequence, the four additions are performed
in parallel.


### Vectors

SIMD operations are performed over a special type of object, which are
called "vectors". A vector object is usually a fixed-sized block of 128-bit (16 bytes).
So if you want to process multiple megabytes of data, you usually have to
process this data in blocks of 16 bytes.




