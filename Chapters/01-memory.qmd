---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main=TRUE
)
```

# Memory and Allocators in Zig

## Introduction

In this chapter, we will talk about memory. How does Zig controls memory? What
commom tools are used? Are there any important aspect that makes memory
different/special in Zig? You will find the answers here.

Every computer needs memory. Is by having memory that computers can temporarily store
the values/results of your calculations. Without memory, programming languages would never have
concepts such as "variables", or "objects", to store the values that you generate.


## Memory spaces

Every variable that you create in your Zig source code needs to be stored somewhere,
in your computer's memory. Depending on where and how you define your variable, Zig
will use a different "memory space", or a different
type of memory to store this variable.

Each type of memory normally serves for different purposes.
In Zig, there are 3 types of memory (or 3 different memory spaces) that we care about. They are:

- Global data register (or the "global data section");
- Stack;
- Heap;


### Compile-time known versus runtime known

One strategy that Zig uses to decide where it will store each variable that you declare, is by looking
at the value of this particular variable. More specifically, by investigating if this value is
known at "compile-time" or at "runtime".

When you write a program in Zig, some values that you write in your program are *known
at compile time*. Meaning that, when you compile your Zig source code, during the compilation process,
the `zig` compiler can figure it out what is the exact value of a particular variable (or object)
that exists in your source code.

For example, in the source code below, we have two constant variables (`name` and `array`) declared.
Because the values of these particular variables are written down, in the source code itself (`"Pedro"`
and the number sequence from 1 to 4), the `zig` compiler can easily discover the values of these constant
variables (`name` and `array`) during the compilation process.


This is what "known at compile time" means. It refers to any variable that you have in your Zig source code
whose value can be identified at compile time.

```{zig}
// ======== Variables
const name = "Pedro";
const array = [_]u8{1, 2, 3, 4};
_ = name; _ = array;
// ========= Function
fn input_length(input: []const u8) usize {
    return input.len;
}
```

The other side of the spectrum are variables whose values are not known at compile time.
Function arguments are a classic example of this. Because the value of each function
argument depends on the value that you assign to this particular argument,
when you call the function.

For example, the function `input_length()` contains an argument named `input`, which is an array of `u8` integers (`[]const u8`).
Is impossible to know at compile time the value of this particular argument. We know that it will be an array of `u8` integers.
But we can't know which exact array of `u8` integers this argument will store, before we execute this function.
It is only *known at runtime*, which is the period of time when you program is executed.

So depending on which input your apply this `input_length()` function over, the `input` argument
will probably have a different value in each case.
Because of this intrinsic characteristic of any function, the value of the argument `input` is not "compile-time known".
It is known only at runtime.



### Global data register

The global data register is a specific section of the executable of your Zig program, that is responsible
for storing any value that is known at compile time.

Every constant variable whose value is known at compile time that you declare in your source code,
is stored in the global data register. Also, every literal value that you write in your source code,
such as the string `"this is a string"`, or the integer `10`, or a boolean value such as `true`,
is also stored in the global data register.

Honestly, you don't need to care much about this memory space. Because you can't control it,
you can't deliberately access it or use it for your own purposes.
Also, this memory space does not affect the logic of your program.
It simply exists in your program.


### Stack vs Heap

If you are familiar with system's programming, or just low-level programming in general, you
probably have heard of the "duel" between Stack vs Heap. These are two different types of memory,
or different memory spaces, which are both available in Zig.

These two types of memory don't actually duel with
each other. This is a commom mistake that beginners have, when seeing "x vs y" styles of
tabloid headlines. These two types of memory are actually complementary to each other.
So, in almost every Zig program that you might ever write, you will likely use a combination of both.
I will describe each memory space in detail over the next sections. But for now, I just want to
stablish the main difference between these two types of memory.

In essence, the stack memory is normally used to store values whose length is fixed and known
at compile time. In contrast, the heap memory is a much more *dinamic* type of memory space, meaning that, it is
used to store values whose length might grow during the execution (runtime) of your program [@jenny2022].
Lengths that grow during runtime are intrinsically "runtime known" type of values.
In other words, if you have a variable whose length might grow during runtime, then, the length
of this variable becomes not known at compile time. These types of variables are usually stored
in the heap memory space.



### Stack

The stack is a type of memory that uses the power of the *stack data structure*, hence the name. 
A "stack" is a type of *data structure* that uses a "last in, first out" (LIFO) mechanism to store the values
you give it to. I imagine you are familiar with this data structure.
But, if you are not, the [Wikipedia page](https://en.wikipedia.org/wiki/Stack_(abstract_data_type))[^wiki-stack]
, or, the [Geeks For Geeks page](https://www.geeksforgeeks.org/stack-data-structure/)[^geek-stack] are both
excellent and easy resources to fully understand how this data structure works.

[^wiki-stack]: <https://en.wikipedia.org/wiki/Stack_(abstract_data_type)>
[^geek-stack]: <https://www.geeksforgeeks.org/stack-data-structure/>

So, the stack memory space is a type of memory that stores values using a stack data structure.
It adds and removes values from the memory by following a "last in, first out" (LIFO) principle.

In general, every function call that you make in Zig will always allocate some space in the stack [@jenny2022; @zigdocs].
The value of each function argument given to the function in this function call is stored in this
stack space. Also, every local variable that you declare inside the function scope are
normally stored in this same stack space.

Looking at the example below, the variable `result` is a local variable declared inside the scope of the `add()`
function. Because of that, this variable is stored inside the stack space reserved for the `add()` function.

Also, the `r` variable (which is declared outside of the `add()` function scope) is also stored in the stack,
specially because it does not contain a value that is *compile-time known*.

```{zig}
// ==== Variable
const r = add(5, 27);
_ = r;
// ====== Function
fn add(x: u8, y: u8) u8 {
    const result = x + y;
    return result;
}
```

So, any variable that you declare inside the scope of a function is always stored inside
the space that was reserved for that particular function in the stack memory. This
also counts for any variable declared inside the scope of your `main()` function. As you would expect, in this case, they
are stored inside the stack space reserved for the `main()` function.

One very important detail about the stack memory is that **it frees itself automatically**.
This is very important, remember that. When variables are stored in the stack memory,
you don't have the work (or the responsibility) of freeing/destroying these objects.
Because they will be automatically destroyed once the stack space is freed at the end of the function scope.

::: {.callout-important}
Variables that are stored in the stack are automatically
freed/destroyed at the end of the function scope.
:::


As I sad earlier, every time you make a function call in Zig, an amount of space in the stack memory is
reserved for this particular function call. But once the function call returns (or ends, if you prefer to call it this way)
the space that was reserved in the stack is destroyed, and all of the variables that were in this space goes away with it.
This mechanism exists because this space, and the variables within it, are not necessary anymore,
since the function "finished it's business". Using the `add()` function that we exposed above as an example, it means that the variable `result` is automatically
destroyed once the function returns.

One important consequence of this mechanism is that, once the function returns, you can no longer access any memory
address that was inside the space in the stack reserved for this particular function. Because this space was
destroyed. This means that you can not make a function **return a pointer to one of it's local variables**.

Think about that for a second. If all local variables are destroyed at the end of the function scope, why
would you even consider returning a pointer to one of these variables? This pointer is at best,
invalid, or, more likely, "undefined". So, yes, you should never write a function that returns a pointer to one
of it's local variables.

So, using again the `add()` function as an example, if you rewrite this function so that it
returns a pointer to the local variable `result`, the `zig` compiler will actually compile
you program, with no warnings or erros. At first glance, it looks that this is good code
that works as expected. But this is a lie!

If you try to take a look at the value inside of the `r` variable,
or, if you try to use this `r` variable in another expression
or function call, then, you would have undefined behaviour, and major
bugs in your program [@zigdocs, see "Lifetime and Ownership"[^life] and "Undefined Behaviour"[^undef] sections].

[^life]: <https://ziglang.org/documentation/master/#Lifetime-and-Ownership>
[^undef]: <https://ziglang.org/documentation/master/#Undefined-Behavior>


```{zig}
// This code compiles succesfully. But it has
// undefined behaviour. Never do this!!!
// ==== Variable
// The `r` variable is undefined!
const r = add(5, 27);
_ = r;
// ====== Function
fn add(x: u8, y: u8) *const u8 {
    const result = x + y;
    return &result;
}
```

This "invalid pointer to stack variable" problem is very known across many programming language communities.
If you try to do the same thing, for example, in a C or C++ program (i.e. returning an address to
a local variable stored in the stack), you would also get undefined behaviour
in the program.

::: {.callout-important}
If a local variable in your function is stored in the stack, you should never
return a pointer to this local variable from the function. Because
this pointer will always become undefined after the function returns, since the stack space of the function
is destroyed at the end of it's scope.
:::

But what if you really need to use this local variable in some way after your function returns?
How can you do this? The answer is: "in the same you would do if this was a C or C++ program. By returning
an address to a variable stored in the heap". The heap memory have a much more flexible lifecycle,
and allows you to get a valid pointer to a local variable of a function that already returned
from it's scope.


### Heap

While the stack accepts only variables whose length is known at compile-time, the heap is much more dinamic
(and flexible) type of memory. It is the perfect type of memory to use
on variables whose size/length might grow during the execution of your program.
Virtually any application that behaves as a server is a classic use case of the heap.
A HTTP server, a SSH server, a DNS server, a LSP server, ... any type of server.

In summary, a server is a type of application that runs for long periods of time,
and that serves (or "deals with") any incoming request that reaches this particular server.
The heap is a good choice for this type of system, mainly because the server does not know upfront
how many requests it will receive from users, while it is active. It could be one single request,
or, 5 thousand requests, or, it could also be zero requests.
The server needs to have the ability to allocate and manage it's memory according to how many requests it receives.

Another key difference between the stack and the heap, is that the heap is a type
of memory that you, the programmer, have complete control over. This makes the heap a
more flexible type of memory, but it also makes harder to work with it. Because you,
the programmer, is responsible for managing everything related to it. Including where the memory is allocated,
how much memory is allocated, and where this memory is freed.

> Unlike stack memory, heap memory is allocated explicitly by programmers and it won’t be deallocated until it is explicitly freed [@jenny2022].

To store a variable in the heap, you, the programmer, needs to explicitly tells Zig to do so,
by using an allocator to allocate some space in the heap.


### Summary

After discussing all of these boring details, we can quickly recap what we learned.
In summary, the Zig compiler will use the following rules to decide where each
variable you declare is stored:

1. every literal value (such as `"this is string"`, `10`, or `true`) is stored in the global data section.

1. every constant variable (`const`) whose value **is known at compile-time** is also stored in the global data section.

1. every variable (constant or not) whose value **is not known at compile time** is stored in the stack of the current scope.

1. if a variable is created with the method `alloc()` or `create()` of an allocator object, this variable is stored in the memory space used by this particular allocator object. Most of allocators available in Zig use the heap memory, so, this variable is likely stored in the heap (`FixedBufferAllocator()` is an exception to that).




