---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "lib"
)
```


# Filesystem and Input/Output (IO)

In this chapter we are going to discuss how to use the cross-platform structs and functions available
in the Zig Standard Library that executes filesystem operations. Most of these functions and structs
comes from the `std.fs` module.

We are also going to talk about Input/Output (also known as IO) operations in Zig. Most of
these operations are made by using the structs and functions from `std.io` module, which defines
descriptors for the *standard channels* of your system (`stdout` and `stdin`), and also,
functions to create and use I/O streams.


## Input/Output basics {#sec-io-basics}

If you have programming experience in a high-level language, you certainly have used before
the input and output functionalities of this language. In other words, you certainly have
been in a situation where you needed to sent some output to the user, or, to receive an input
from the user.

For example, in Python we can receive some input from the user by using the `input()` built-in
function. But we can also print (or "show") some output to the user by using the `print()`
built-in function. So yes, if you have programmed before in Python, you certainly have
used these functions once before.

But do you know how these functions relate back to your operating system (OS)? How exactly
they are interacting with the resources of your OS to receive or sent input/output.
In essence, these input/output functions from high-level languages are just abstractions
over the *standard output* and *standard input* channels of your operating system.

This means that we receive an input, or send some output, through the operating system.
It is the OS that makes the bridge between the user and your program. Your program
does not have a direct access to the user. It is the OS that intermediates every
message exchanged between your program and the user.

The *standard output* and *standard input* channels of your OS are commonly known as the
`stdout` and `stdin` channels of your OS, respectively. In some contexts, they are also called of the *standard output device*
and *standard input device*. As the name suggests, the *standard output*
is the channel through which output flows, while the *standard input* is the channel in which
input flows.

Furthermore, OS's also normally create a dedicated channel for exchanging error messages, known as the
*standard error* channel, or, the `stderr` channel. This is the channel to which error and warning messages
are usually sent to. These are the messages that are normally displayed in red-like or orange-like colors
into your terminal.

Normally, every OS (e.g. Windows, MacOS, Linux, etc.) creates a dedicated and separate pair of
*standard output*, *standard error* and *standard input* channels for every single program (or process) that runs in your computer.
This means that every program you write have a dedicated `stdin`, `stderr` and `stdout` that are separate
from the `stdin`, `stderr` and `stdout` of other programs and processes that are currently running.

This is a behaviour from your OS.
This does not come from the programming language that you are using.
Because as I sad earlier, input and output in programming languages, specially
in high-level ones, are just a simple abstraction over the `stdin`, `stderr` and `stdout` from your current OS.
That is, your OS is the intermediary between every input/output operation made in your program,
regardless of the programming language that you are using.


### The writer and reader pattern {#sec-writer-reader}

In Zig, there is a pattern around input/output (IO). I (the author of this book) don't know if there is an official name for this pattern.
But here, in this book, I will call it the "writer and reader pattern". In essence, every IO operation in Zig is
made through either a `GenericReader` or a `GenericWriter` object[^gen-zig].

These two data types come from the `std.io` module of the Zig Standard Library. As their names suggests, a
`GenericReader` is an object that offers tools to read data from "something" (or "somewhere"), while a `GenericWriter`
offers tools to write data into this "something".
This "something" might be different things: like a file that exists in your filesystem; or, it might be a network socket of your system[^sock]; or,
a continuous stream of data, like a standard input device from your system, that might be constantly
receiving new data from users, or, as another example, a live chat in a game that is constantly receiving and displaying new messages from the
players of the game.

[^gen-zig]: Previously, these objects were known as the `Reader` and `Writer` objects.
[^sock]: The socket objects that we have created at @sec-create-socket, are examples of network sockets.

So, if you want to **read** data from something, or somewhere, it means that you need to use a `GenericReader` object.
But if you need instead, to **write** data into this "something", then, you need to use a `GenericWriter` object instead.
Both of these objects are normally created from a file descriptor object. More specifically, through the `writer()` and `reader()`
methods of this file descriptor object. If you are not familiar with this type of object, go to the
next section.

Every `GenericWriter` object have methods like `print()`, which allows you to write/send a formatted string
(i.e. this formatted string is like a `f` string in Python, or, similar to the `printf()` C function)
into the "something" (file, socket, stream, etc.) that you are using. It also have a `writeAll()` method, which allows you to
write a string, or, an array of bytes into the "something".

Likewise, every `GenericReader` object have methods like `readAll()`, which allows you to read the
data from the "something" (file, socket, stream, etc.) until it fills a particular array (i.e. a "buffer") object.
In other words, if you provide an array object of 300 `u8` values to `readAll()`, then, this method attempts to read 300 bytes
of data from the "something", and it stores them into the array object that you have provided.

We also have other methods, like the `readAtLeast()` method,
which allows you to specify how many bytes exactly you want to read from the "something".
In more details, if you give the number $n$ as input to this method, then, it will attempt to read at least $n$ bytes of data from the "something".
The "something" might have less than $n$ bytes of data available for you to read, so, it is not garanteed
that you will get precisely $n$ bytes as result.

Another useful method is `readUntilDelimiterOrEof()`. In this method, you specify a "delimiter character".
The idea is that this function will attempt to read as many bytes of data as possible from the "something",
until it encounters the end of the stream, or, it encounters the "delimiter character" that you have specified.

If you don't know exactly how many bytes will come from the "something", you may find the `readAllAlloc()` method
useful. In essence, you provide an allocator object to this method, so that it can allocate more space if needed.
As consequence, this method will try to read all bytes of the "something", and, if it runs out of space at some point
during the "reading process", it uses the allocator object to allocate more space to continue reading the bytes.
As result, this method returns a slice to the array object containing all the bytes read.

This is just a quick description of the methods present in these types of objects. But I recommend you
to read the official docs, both for
[`GenericWriter`](https://ziglang.org/documentation/master/std/#std.io.GenericWriter)[^gen-write] and
[`GenericReader`](https://ziglang.org/documentation/master/std/#std.io.GenericReader)[^gen-read].
I also think it is a good idea to read the source code of the modules in the Zig Standard Library
that defines the methods present in these objects, which are the
[`Reader.zig`](https://github.com/ziglang/zig/blob/master/lib/std/io/Reader.zig)[^mod-read]
and [`Writer.zig`]()[^mod-write].

[^gen-read]: <https://ziglang.org/documentation/master/std/#std.io.GenericReader>.
[^gen-write]: <https://ziglang.org/documentation/master/std/#std.io.GenericWriter>.
[^mod-read]: <https://github.com/ziglang/zig/blob/master/lib/std/io/Reader.zig>.
[^mod-write]: <https://github.com/ziglang/zig/blob/master/lib/std/io/Writer.zig>.


### Introducing file descriptors {#sec-file-descriptor}

A "file descriptor" object is a core component behind every I/O operation that is made in any operating system (OS).
Such object is an identifier for a particular input/output (IO) resource from your OS [@wiki_file_descriptor].
It describes and identifies this particular resource. An IO resource might be:

- an existing file in your filesystem.
- an existing network socket.
- other types of stream channels.
- a pipeline (or just "pipe") in your terminal[^pipes].

[^pipes]: A pipeline is a mechanism for inter-process communication, or, inter-process IO. You could also interpret a pipeline as a "set of processes that are chained together, through the standard input/output devices of the system". At Linux for example, a pipeline is created inside a terminal, by connecting two or more terminal commands with the "pipe" character (`|`).

From the bulletpoints listed aboved, we know that although the term "file" is present,
a "file descriptor" might describe something more than just a file.
This concept of a "file descriptor" comes from the Portable Operating System Interface (POSIX) API,
which is a set of standards that guide how operating systems across the world should be implemented,
to maintain compatibility between them.

A file descriptor not only identifies the input/output resource that you are using to receive or send some data,
but it also describes where this resource is, and also, which IO mode this resource is currently using.
For example, this IO resource might be using only the "read" IO mode, which means that this resource
is open to "read operations", while "write operations" are closed and not authorized.
These IO modes are essentially, the modes that you provide to the argument `mode`
from the `fopen()` C function, and also, from the `open()` Python built-in function.

In C, a "file descriptor" is a `FILE` pointer, but, in Zig, a file descriptor is a `File` object.
This data type (`File`) is described in the `std.fs` module of the Zig Standard Library.
We normally don't create a `File` object directly in our Zig code. Instead, we normally get such object as result when we
open an IO resource. In other words, we normally ask to our OS to open and use a particular IO
resource, and, if the OS do open succesfully this IO resource, the OS normally handles back to us
a file descriptor to this particular IO resource.

So you usually get a `File` object by using functions and methods from the Zig Standard Library
that asks the OS to open some IO resources, like the `openFile()` method that opens a file in the
filesystem. The `net.Stream` object that we have created at @sec-create-socket is also a type of
file descriptor object.


### The *standard output*

You already saw across this book, how can we access and use specifically the `stdout` in Zig
to send some output to the user.
For that, we use the `getStdOut()` function from the `std.io` module. This function returns
a file descriptor that describes the `stdout` channel of your current OS. Through this file
descriptor object, we can read from or write stuff to the `stdout` of our program.

Although we can read stuff recorded into the `stdout` channel, we normally only
write to (or "print") stuff into this channel. The reason is very similar to what we discussed at
@sec-read-http-message, when we were discussing what "reading from" versus "writing to" the connection
object from our small HTTP Server project would mean.

When we write stuff into a channel, we are essentially sending data to the other end of this channel.
In contrast, when we read stuff from this channel, we are essentially reading the data that was sent
through this channel. Since the `stdout` is a channel to send output to the user, the key verb here
is **send**. We want to send something to someone, and, as consequence, we want to **write** something
into some channel.

That is why, when we use `getStdOut()`, most of the times, we also use the `writer()` method from the `stdout` file descriptor,
to get access to a writer object that we can use to write stuff into this `stdout` channel.
More specifically, this `writer()` method returns a `GenericWriter` object. One of the
main methods of this `GenericWriter` object is the `print()` method that we have used
before to write (or "print") a formatted string into the `stdout` channel.

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    try stdout.writeAll(
        "This message was written into stdout.\n"
    );
}
```

```
This message was written into stdout.
```


This `GenericWriter` object is like any other generic writer object that you would normally get from a file descriptor object.
So, the same methods from a generic writer object that you would use while writing files to the filesystem for example, you could also
use them here, from the file descriptor object of `stdout`, and vice-versa.


### The *standard input*

You can access the *standard input* (i.e. `stdin`) in Zig by using the `getStdIn()` function from the `std.io` module.
Like it's sister (`getStdOut()`), this function also returns a file descriptor object that describes the `stdin` channel
of your OS.

Since now, we want to receive some input from the user, the key verb here becomes **receive**, and, as consequence,
we usually want to **read** data from the `stdin` channel, instead of writing data into it. So, we normally use
the `reader()` method of the file descriptor object returned by `getStdIn()`, to get access to a `GenericReader`
object that we can use to read data from `stdin`.

In the example below, we are creating a small buffer capable of holding 20 characters. Then, we try to read
the data from the `stdin` with the `readUntilDelimiterOrEof()` method, and save this data into the `buffer` object.
Also notice that we are reading the data from the `stdin` until we hit a new line character (`'\n'`).

If you execute this program, you will notice that this program stops the execution, and start to wait indefinetly
for some input from the user. In other words, you need to type your name into the terminal, and then, you press Enter to
send your name to `stdin`. After you send your name to `stdin`, the program reads this input, and continues with the execution,
by printing the given name to `stdout`. In the example below, I typed my name (Pedro) into the terminal, and then, pressed Enter.


```{zig}
#| eval: false
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
const stdin = std.io.getStdIn().reader();
pub fn main() !void {
    try stdout.writeAll("Type your name\n");
    var buffer: [20]u8 = undefined;
    @memset(buffer[0..], 0);
    _ = try stdin.readUntilDelimiterOrEof(buffer[0..], '\n');
    try stdout.print("Your name is: {s}\n", .{buffer});
}
```

```
Type your name
Your name is: Pedro

```


### The *standard error*

The *standard error* (a.k.a. the `stderr`) works exactly the same as the `stdout`.
You just call the `getStdErr()` function from the `std.io` module, and you get the file descriptor to `stderr`.
Ideally, you should write only error or warning messages to `stderr`, because this is
the purpose of this channel.





## Buffered IO

As we described at @sec-io-basics, input/output (IO) operations are made directly by the operating system.
It is the OS that manages the IO resource that you want to use for your IO operations.
The consequence of this fact is that IO operations are heavilly based on system calls (i.e. calling the operating system directly).

Just to be clear, there is nothing particularly wrong with system calls. We use them all the time on
any serious codebase written in any low-level programming language. However, system calls are
always orders of magnitude slower than many different types of operations.

So is perfectly fine to use a system call once in a while. But when these system calls start to be used often,
you can clearly notice most of the times the lost of performance in your application. So, the good rule of thumbs
is to use a system call only when it is needed, and also, only in infrequent situations, to reduce
the number of system calls performed to a minimum.

Buffered IO is a strategy to achieve better performance. It is used to reduce the number of system calls made by IO operations, and, as
consequence, achieve a much higher performance in these IO operations. IO operations made through a `FILE` pointer in C are buffered
by default, so, at least in C, you don't need to worry about this subject. But IO operations in both Rust and Zig are not
buffered depending on which file descriptor, functions and methods that you are using.

In Rust, buffered IO is implemented through the `BufReader` and `BufWriter` structs, while in Zig, it is implemented
through the `BufferedReader` and `BufferedWriter` structs.

More specifically, the IO operations that you perform through the `GenericWriter` and `GenericReader` objects
that we presented at @sec-writer-reader are not buffered by default, which means that these objects
might create a lot of system calls depending on the situation.

In other words, by not performing buffered IO operations, a `GenericWriter` and `GenericReader` object
usually produces a high amount of system calls to read or write small amounts of data. The more ideal
scenario would be to use a single system call to read or write a high amount of data at once
(i.e. to read or write a batch of data in a single system call). This is where buffered IO comes in.

To explain buffered IO, is best to use an example. Suppose you have a file with 1MB size, and
that you want to read this file into your program.



When you use buffered IO, every IO operation made uses an underlying buffer object. The idea is, instead of using
multiple system calls, with buffered IO we create a single system call that tells something like this:

> Hey OS! Could you please read/write enough bytes from this IO resource to fill the space.

methods like `readAll()` or `writeAll()` use a single system call.




## Filesystem basics

Now that we have discussed the basics around Input/Output operations in Zig, we need to
talk about the basics around filesystems, which is another core part of any operating system.
Also, filesystems are related to input/output, because the files that we store and create in our
computer are considered an IO resource, as we described at @sec-file-descriptor.

Likewise when we were talking about input/output, if you have ever programmed in your life, you probably know
some basics about filesystems and file operations, etc.
But, since I don't know you, I don't know what is your background. As a result,
these concepts that I will describe might be clear in your mind, but they also maybe be not as clear as you think.
Just bare with me, while I'm trying to put everyone on the same basis.


### The concept of current working directory (CWD)

The working directory is the folder on your computer where you are currently rooted at,
or in other words, it is the folder that your program is currently looking at.
Therefore, whenever you are executing a program, this program is always working with
a specific folder on your computer. It is always in this folder that the program will initially
look for the files you require, and it is also in this folder that the program
will initially save all the files you ask it to save.

The working directory is determined by the folder from which you invoke your program
in the terminal. In other words, if you are in the terminal of your OS, and you
execute a binary file (i.e. a program) from this terminal, the folder to which your terminal
is pointing at is the current working directory of your program that is being executed.

At @fig-cwd we have an example of me executing a program from the terminal. We are executing
the program outputted by the `zig` compiler by compiling the Zig module named `hello.zig`.
The CWD in this case is the `zig-book` folder. In other words, while the `hello.zig` program
is executing, it will be looking at the `zig-book` folder, and any file operation that we perform
inside this program, will be using this `zig-book` folder as the "starting point", or, as the "central focus".

![An example of executing a program from the terminal](./../Figures/cwd.png){#fig-cwd}

Just because we are rooted inside a particular folder (in the case of @fig-cwd, the `zig-book` folder) of our computer,
it doesn't mean that we cannot access or write resources in other locations of our computer.
The current working directory (CWD) mechanism just defines where your program will look first
for the files you ask for. This does not prevent you from accessing files that are located
elsewhere on your computer. However, to access any file that is in a folder other than your
current working directory, you must provide a path to that file or folder.


### The concept of paths

A path is essentially a location. It points to a location in your filesystem. We use
paths to describe the location of files and folders in our computer.
One important aspect is that paths are always written inside strings,
i.e. they are always provided as text values.

There are two types of paths that you can provide to any program in any OS: a relative path, or an absolute path.
Absolute paths are paths that start at the root of your filesystem, and go all the way to the file name or the specfic folder
that you are referring to. This type of path is called absolute, because it points to a unique, absolute location on your computer.
That is, there is no other existing location on your computer that corresponds to this path. It is an unique identifier.

In Windows, an absolute path is a path that starts with a hard disk identifier (e.g. `C:/Users/pedro`).
On the other hand, absolute paths in Linux and MacOS, are paths that start with a forward slash character (e.g. `/usr/local/bin`).
Notice that a path is composed by "segments". Each segment is connected to each other by a slash character (`\` or `/`).
On Windows, the backward slash (`\`) is normally used to connect the path segments. While on Linux and MacOS, the forward
slash (`/`) is the character used to connect path segments.

In contrast, a relative path is a path that start at the CWD. In other words, a relative path is
"relative to the CWD". The path used to access the `hello.zig` file at @fig-cwd is an example of relative path. This path
is reproduced below. This path begins at the CWD, which in the context of @fig-cwd, is the `zig-book` folder,
then, it goes to the `ZigExamples` folder, then, into `zig-basics`, then, to the `hello.zig` file.

```
ZigExamples/zig-basics/hello_world.zig
```


### Path wildcards

When providing paths, specially relative paths, you have the option of using a *wildcard*.
There are two commonly used *wildcards* in paths, which are "one period" (.) and "two periods" (..).
In other words, these two specific characters have special meanings when used in paths,
and can be used on any operating system (Mac, Windows, Linux, etc.). That is, they
are "cross platform".

The "one period" represents an alias for your current working directory.
This means that the relative paths `"./Course/Data/covid.csv"` and `"Course/Data/covid.csv"` are equivalent.
On the other hand, the "two periods" refers to the previous directory.
For example, the path `"Course/.."` is equivalent to the path `"."`, that is, the current working directory.

Therefore, the path `"Course/.."` refers to the folder before the `Course` folder.
As another example, the path `"src/writexml/../xml.cpp"` refers to the file `xml.cpp`
that is inside the folder before the `writexml` folder, which in this example is the `src` folder.
Therefore, this path is equivalent to `"src/xml.cpp"`.



## The current working directory handler

In Zig, filesystem operations are usually made through a directory handler object.
A directory handler in Zig is an object of type `Dir`, which is a struct that comes from the `std.fs` module.
You normally create such `Dir` object, by calling the `std.fs.cwd()` function.
This function returns a `Dir` object that points to, or, that represents the CWD.

Through this `Dir` object, you can create new files, or modify, or read existing ones that are
inside your CWD. In the example below, we are creating this `Dir` object, and storing it
inside the `cwd` object. Through this `cwd` object we can perform filesystem operations in
the CWD, creating, deleting, reading or modifying files inside the CWD, and other locations
in our computer.

```{zig}
#| auto_main: true
const cwd = std.fs.cwd();
_ = cwd;
```


## CRUD operations on files

In this section, we will describe how to perform basic CRUD (Create, Read, Update and Delete) operations
on files. This section describes which methods from the `Dir` object are used to perform
these operations, and we also describes the available flags for each operation.


### Creating files

We create new files by using the `createFile()` method from the `Dir` object.
Just provide the name of the file that you want to create, and this function will
do the necessary steps to create such file. You can also provide a relative path to this function,
and it will create the file by following this path, which is relative to the CWD.

This function might return an error, so, you should use `try`, `catch`, or any of the other methods presented
at @sec-error-handling to handle this possible error. But if everything goes well,
this `createFile()` method returns a `File` object as result.

Take this code example below. In this example, we are creating a new text file
named `foo.txt`. If the function `createFile()` succeeds, the object named `file` will contain a file handler,
which is pretty much the same thing as a file descriptor object created from the famous C function `fopen()`[^fopen-doc].

[^fopen-doc]: <https://www.tutorialspoint.com/c_standard_library/c_function_fopen.htm>

Now, a quick note, when we create a file descriptor with the C function `fopen()`, we must always close the file
at the end of our program, or, as soon as we completed all operations that we wanted to perform
on the file. In Zig, this is no different. So everytime we create a new file, this file remains
"open", waiting for some operation to be performed. As soon as we are done with it, we always have
to close this file, to free the resources associated with it. This is true both for Zig and C.
In Zig, we do this by calling the method `close()` from the file handler object.


```{zig}
#| eval: false
const cwd = std.fs.cwd();
const file = try cwd.createFile("foo.txt", .{});
// Do things with the file ...
// Don't forget to close the file at the end.
defer file.close();
```



