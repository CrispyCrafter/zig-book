---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = TRUE
)
```

# Introducing Zig

In this chapter, I want to introduce you to the world of Zig.
Despite it's rapidly growing over the last years, Zig is, still, a very young language.
As a consequence, it's world is still very wild and to be explored.
This book is my attempt to help you on your personal journey for understanding and exploring the exciting world of Zig.

I assume you have some previous experience with some programming
language in this book, not necessarily with a low-level one.
So, if you have experience with Python, or Javascript, for example, is fine.
But, if you do have experience with low-level languages, such as C, C++, or
Rust, you will probably learn faster throughout this book.



## What is Zig?

Zig is a modern, low-level, and general-purpose programming language. Some programmers interpret
Zig as the "modern C language". It is a simple language like C, but with some
modern features.

In the author's personal interpretation, Zig is tightly connected with "less is more".
Instead of trying to become a modern language by adding more and more features,
many of the core improvements that Zig brings to the
table are actually about removing annoying and evil behaviours/features from C and C++.
In other words, Zig tries to be better by simplifying the language, and by having more consistent and robust behaviour.
As a result, analyzing, writing and debugging applications become much easier and simpler in Zig, than it is in C or C++.

This philosophy becomes clear with the following phrase from the official website of Zig:

> "Focus on debugging your application rather than debugging your programming language knowledge".

This phrase is specially true for C++ programmers. Because C++ is a gigantic language,
with tons of features, and also, there are lots of different "flavors of C++". These elements
are what makes C++ so much complex and hard to learn. Zig tries to go in the opposite direction.
Zig is a very simple language, more closely related to other simple languages such as C and Go.

The phrase above is still important for C programmers too. Because, even C being a simple
language, it is still hard sometimes to read and understand C code. For example, pre-processor macros in
C are an evil source of confusion. They really makes it hard sometimes to debug
C programs. Because macros are essentially a second language embedded in C that obscures
your C code. With macros, you are no longer 100% sure about which pieces
of code are being sent to the compiler. It obscures the actual source code that you wrote.

You don't have macros in Zig. In Zig, the code you write, is the actual code that get's compiled by the compiler.
You don't have evil features that obscures you code.
You also don't have hidden control flow happening behind the scenes. And, you also
don't have functions or operators from the standard library that make
hidden memory allocations behind your back.

By being a simpler language, Zig becomes much more clear and easier to read/write,
but at the same time, it also achieves a much more robust state, with more consistent
behaviour in edge situations. Once again, less is more.


## Hello world in Zig

We begin our journey in Zig by creating a small "Hello World" program.
To start a new Zig project in your computer, you simply call the `init` command
from the `zig` compiler.
Just create a new directory in your computer, then, init a new Zig project
inside this directory, like this:

```bash
mkdir hello_world
cd hello_world
zig init
```

```
info: created build.zig
info: created build.zig.zon
info: created src/main.zig
info: created src/root.zig
info: see `zig build --help` for a menu of options
```

### Understanding the project files {#sec-project-files}

After you run the `init` command from the `zig` compiler, some new files
are created inside of your current directory. First, a "source" (`src`) directory
is created, containing two files, `main.zig` and `root.zig`. Each `.zig` file
is a separate Zig module, which is simply a text file that contains some Zig code.


The `main.zig` file for example, contains a `main()` function, which represents
the entrypoint of your program. It is where the execution of your program begins.
As you would expect from a C, C++, Rust or Go,
to build an executabe program in Zig, you also need to declare a `main()` function in your module.
So, the `main.zig` module represents an executable program written in Zig.

On the other side, the `root.zig` module does not contain a `main()` function. Because
it represents a library written in Zig. Libraries are different than executables.
They don't need to have an entrypoint to work.
So, you can choose which file (`main.zig` or `root.zig`) you want to follow depending on which type
of project (executable or library) you want to develop.

```bash
tree .
```

```
.
├── build.zig
├── build.zig.zon
└── src
    ├── main.zig
    └── root.zig

1 directory, 4 files
```


Now, in addition to the source directory, two other files were created in our working directory:
`build.zig` and `build.zig.zon`. The first file (`build.zig`) represents a build script
written in Zig.
In other words, this file contain Zig code that executes the necessary steps to build the entire project.

In general, low-level languages normally use a compiler to build your
source code into binary executables or binary libraries.
Nevertheless, this process of compiling your source code and building
binary executables or binary libraries from it, became a real challenge
in the programming world, once the projects became bigger and bigger.
As a result, programmers created "build systems", which are a second set of tools designed to make this process
of compiling and building complex projects, easier.

Examples of build systems are CMake, GNU Make, GNU Autoconf and Ninja,
which are used to build complex C and C++ projects.
With these systems, you can write scripts, which are called "build scripts".
They simply are scripts that describes the necessary steps to compile/build
your project.

However, these are separate tools, that do not
belong to C/C++ compilers, like `gcc` or `clang`.
As a result, in C/C++ projects, you have not only to install and
manage your C/C++ compilers, but you also have to install and manage
these build systems separately.

But instead of using a separate build system, in Zig, we use the
Zig language itself to write build scripts.
In other words, Zig contains a native build system in it. And
we can use this build system to write small scripts in Zig,
which describes the necessary steps to build/compile our Zig project[^zig-build-system].
So, everything you need to build a complex Zig project is the
`zig` compiler, and nothing more.

[^zig-build-system]: <https://ziglang.org/learn/overview/#zig-build-system>.


Now that we described this topic in more depth, let's focus
on the second generated file (`build.zig.zon`), which is the Zig package manager configuration file,
where you can list and manage the dependencies of your project. Yes, Zig have
a package manager (like `pip` in Python, `cargo` in Rust, or `npm` in Javascript) called Zon,
and this `build.zig.zon` file is similar to the `package.json` file
in Javascript projects, or, the `Pipfile` in Python projects.


### Looking at the `root.zig` file {#sec-root-file}

Let's take a look at the `root.zig` file, and start to analyze some of the
syntax of Zig.
The first thing that you might notice, is that every line of code
that have an expression in it, ends with a semicolon character (`;`). This is
similar syntax to other languages such as C, C++ and Rust,
which have the same rule.

Also, notice the `@import()` call at the first line. We use this built-in function
to import functionality from other Zig modules into our current module.
In other words, the `@import()` function works similarly to the `#include` pre-processor
in C or C++, or, to the `import` statement in Python or Javascript code.
In this example, we are importing the `std` module,
which gives you access to the Zig standard library.

In this `root.zig` file, we can also see how assignments (i.e. creating new objects)
are made in Zig. You can create a new object in Zig by using the following syntax
`(const|var) name = value;`. In the example below, we are creating two constant
objects (`std` and `testing`). At @sec-assignments we talk more about objects in general.

```{zig}
#| eval: false
const std = @import("std");
const testing = std.testing;

export fn add(a: i32, b: i32) i32 {
    return a + b;
}
```

Functions in Zig are declared similarly to functions in Rust, using the `fn` keyword. In the example above,
we are declaring a function called `add()`, which have two arguments named `a` and `b`, and returns
a integer number (`i32`) as result.

Maybe Zig is not exactly a strongly-typed language, because you do not need
necessarily to specify the type of every single object you create across your source code.
But you do have to explicitly specify the type of every function argument, and also,
the return type of every function you create in Zig. So, at least in function declarations,
Zig is a strongly-typed language.

We specify the type of an object or a function argument in Zig, by
using a colon character (`:`) followed by the type after the name of this object/function argument.
With the expressions `a: i32` and `b: i32`, we know that, both `a` and `b` arguments have type `i32`,
which is a signed 32 bit integer. In this part,
the syntax in Zig is identical to the syntax in Rust, which also specifies types by
using the colon character.

Lastly, we have the return type of the function at the end of the line, before we open
the curly braces to start writing the function's body, which, in the example above is
again a signed 32 bit integer (`i32`) value. This specific part is different than it is in Rust.
Because in Rust, the return type of a function is specified after an arrow (`->`).
While in Zig, we simply declare the return type directly after the parentheses with the function arguments.

We also have an `export` keyword before the function declaration. This keyword
is similar to the `extern` keyword in C. It exposes the function
to make it available in the library API.

In other words, if you have a project where you are currently building
a library for other people to use, you need to expose your functions
so that they are available in the library's API, so that users can use it.
If we removed the `export` keyword from the `add()` function declaration,
then, this function would be no longer exposed in the library object built
by the `zig` compiler.


Having that in mind, the keyword `export` is a keyword used in libraries written in Zig.
So, if you are not currently writing a library in your project, then, you do not need to
care about this keyword.


### Looking at the `main.zig` file {#sec-main-file}

Now that we have learned a lot about Zig's syntax from the `root.zig` file,
let's take a look at the `main.zig` file.
A lot of the elements we saw in `root.zig` are also present in `main.zig`.
But we have some other elements that we did not have seen yet, so let's dive in.

First, look at the return type of the `main()` function in this file.
We can see a small change. Now, the return
type of the function (`void`) is accompanied by an exclamation mark (`!`).
What this exclamation mark is telling us, is that this `main()` function
might also return an error.

So, in this example, the `main()` function can either return `void`, or, return an error.
This is an interesting feature of Zig. If you write a function, and, something inside of
the body of this function might return an error, then, you are forced to:

- either add the exclamation mark to the return type of the function, to make it clear that
this function might return an error.
- or explicitly handle this error that might occur inside the function, to make sure that,
if this error does happen, you are prepared, and your function will no longer return an error
because you handled the error inside your function.

In most programming languages, we normally handle (or deals with) an error through
a *try catch* pattern, and Zig, this is no different. But, if we look at the `main()` function
below, you can see that we do have a `try` keyword in the 5th line. But we do not have a `catch` keyword
in this code.

This means that, we are using the keyword `try` to execute a code that might return an error,
which is the `stdout.print()` expression. But because we do not have a `catch` keyword in this line,
we are not treating (or dealing with) this error.
So, if this expression do return an error, we are not catching and solving this error in any way.
That is why the exclamation mark was added to the return type of the function.

So, in essence, the `try` keyword executes the expression `stdout.print()`. If this expression
returns a valid value, then, the `try` keyword do nothing essentially. It simply passes this value forward. But, if the expression do
return an error, then, the `try` keyword will unwrap and return this error from the function, and also print it's
stack trace to `stderr`.

This might sound weird to you, if you come from a high-level language. Because in
high-level languages, such as Python, if an error occurs somewhere, this error is automatically
returned and the execution of your program will automatically stops, even if you don't want
to stop the execution. You are obligated to face the error.

But if you come from a low-level language, then, maybe, this idea do not sound so weird or distant to you.
Because in C for example, normally functions doesn't raise errors, or, they normally don't stop the execution.
In C, error handling
is done by constantly checking the return value of the function. So, you run the function,
and then, you use an if statement to check if the function returned a value that is valid,
or, if it returned an error. If an error was returned from the function, then, the if statement
will execute some code that fixes this error.

So, at least for C programmers, they do need to write a lot of if statements to
constantly check for errors around their code. And because of that, this simple feature from Zig, might be
extraordinary for them. Because this `try` keyword can automatically unwrap the error,
and warn you about this error, and let you deal with it, without any extra work from the programmer.


```{zig}
#| eval: false
#| auto_main: false
const std = @import("std");

pub fn main() !void {
    const stdout = std.io.getStdOut().writer();
    try stdout.print("Hello, {s}!\n", .{"world"});
}
```

Now, another thing that you might have noticed in this code example, is that
the `main()` function is marked with the `pub` keyword. This keyword means
"public". It marks the `main()` function as a *public function* from this module.

In other words, every function that you declare in your Zig module is, by default, a private (or "static")
function that belongs to this Zig module, and can only be used (or called) from within this same module.
Unless, you explicitly mark this function as a public function with the `pub` keyword.
This means that the `pub` keyword in Zig do essentially the opposite of what the `static` keyword
do in C/C++.

By making a function "public", you allow other Zig modules to access and call this function,
and use it for they own purposes.
all these other Zig modules need to do is, to import your module with the `@import()`
built-in function. Then, they get access to all public functions that are present in
your Zig module.


### Compiling your source code {#sec-compile-code}

You can compile your Zig modules into a binary executable by running the `build-exe` command
from the `zig` compiler. You simply list all the Zig modules that you want to build after
the `build-exe` command, separated by spaces. In the example below, we are compiling the module `main.zig`.

```bash
zig build-exe src/main.zig
```

Since we are building an executable, the `zig` compiler will look for a `main()` function
declared in any of the files that you list after the `build-exe` command. If
the compiler does not find a `main()` function declared somewhere, a
compilation error will be raised, warning about this mistake.

The `zig` compiler also offers a `build-lib` and `build-obj` commands, which work
the exact same way as the `build-exe` command. The only difference is that, they compile your
Zig modules into a portale C ABI library, or, into object files, respectively.

In the case of the `build-exe` command, a binary executable file is created by the `zig`
compiler in the root directory of your project.
If we take a look now at the contents of our current directory, with a simple `ls` command, we can
see the binary file called `main` that was created by the compiler.

```bash
ls
```

```
build.zig  build.zig.zon  main  src
```

If I execute this binary executable, I get the "Hello World" message in the terminal
, as we expected.

```bash
./main
```

```
Hello, world!
```


### Compile and execute at the same time

On the previous section, I presented the `zig build-exe` command, which
compiles Zig modules into an executable file. However, this means that,
in order to execute the executable file, we have to run two different commands.
First, the `zig build-exe` command, and then, we call the executable file
created by the compiler.

But what if we wanted to perform these two steps,
all at once, in a single command? We can do that by using the `zig run`
command.

```bash
zig run src/main.zig
```

```
Hello, world!
```

### Compiling the entire project {#sec-compile-project}

Just as I described at @sec-project-files, as our project grows in size and
complexity, we usually prefer to organize the compilation and build process
of the project into a build script, using some sort of "build system".

In other words, as our project grows in size and complexity,
the `build-exe`, `build-lib` and `build-obj` commands become
harder and header to use directly. Because then we start to list
multiple and multiple modules at the same time. We also
start to adding built-in compilation flags to customize the
build process for our needs, etc. It becomes a lot of work
to write the necessary commands by hand.

In C/C++ projects, programmers usually opt to use CMake, `Makefile` or `configure` scripts
to organize this process. However, in Zig, we have a native build system in the language itself.
So, we can write build scripts in Zig to compile and build Zig projects. Then, all we
need to do, is to call the `zig build` command to build our project.

So, when you execute the `zig build` command, the `zig` compiler will search
for a Zig module named `build.zig` inside your current directory, which
should be your build script, containing the necessary code to compile and
build your project. If the compiler do find this `build.zig` file in your directory,
then, the compiler will essentially execute a `zig run` command
over this `build.zig` file, to compile and execute this build
script, which in turn, will compile and build your entire project.


```bash
zig build
```


After you execute this "build project" command, a `zig-out` directory
is created in the root of your project directory, where you can find
the binary executables and libraries created from your Zig modules
accordingly to the build commands that you specified at `build.zig`.
We will talk more about the build system in Zig latter in this book.

In the example below, I'm executing the binary executable
named `hello_world` that was generated by the compiler after the
`zig build` command.

```bash
./zig-out/bin/hello_world
```

```
Hello, world!
```


## High-level languages vs Low-level languages

This book will definitely help you, on your journey to learn Zig. But there is
a limit on how much a book can do. So you will need extra resources, and more
strategies if you want to trully be good at Zig.

You will need more resources, not because Zig is necessarily a hard language to learn, but
because it is a low-level language. I'm emphasizing that, because not many people think much about
the consequences of this fact. As I sad earlier, Zig is a very simple language, with very
simple syntax. But because it is a low-level language, you will have
to write (at least) as twice amount of Zig code to do a similar job that you would do on a high-level
language, such as Python or Javascript.

In other words, with a low-level language you get much more control and power, but
you also get a lot more responsibilities. You have to be much more explicit and
include much more details in your code to make it work properly. This is an intrinsic
characteristic present in all low-level languages, such as C, C++ and Rust.

Another side of the problem with low-level languages is that they require a different set of skills and knowledges from you,
and this creates a skill (or knowledge) gap for a lot of professionals.
I mean, high-level languages are so much easier, that you, as a professional, can work
and focus on other things, or other aspects of your profession that might be equally important to your career,
such as: doing a graduate course, or learning more about business strategy, product development, and
soft skills (such as communication skills, personal development).

Just as a simple example, a part of the readers of this book probably work with Websites and APIs in the Web,
using either Javascript, Python or PHP. These high-level languages include multiple layers of abstractions in them,
which will help you to work quicker and with ease. As a consequence, dealing with APIs in these languages is much simpler.
Because you don't have to learn all of these very specific terms and technical knowledge about
how HTTP actually works at the lowest level. All you really need to know, is which library to use,
and how to assemble the parts that make a HTTP Request.

In contrast, when working with a low-level language, most of the times you have to implement
a HTTP Server from scratch, or, to use a library that helps you get there, but doesn't 
include a high amount of abstractions. As a result of that, you need to learn a lot of
details about how HTTP actually works at the lowest level. You will probably need to learn: 1) some details about
the HTTP Protocol specification; 2) a lot of technical terms about web sockets (such as "listen", "bind socket", "accept connection");
3) how to create TCP connections using IP addresses; 4) learn about the difference between IPv4 and IPv6.
In essence, when you work with a low-level language, you have to know much more details about everything you do.

Another topic that makes low-level languages much harder to learn than high-level languages is compilation.
In low-level languages, you have to use a compiler to compile your source code into binary executables or 
libraries. But compiling the same source code in multiple platforms, for multiple targets, is actually
incredibly hard, and a real challenge in our modern world.
Differences between the manufacturing and architecture of each computer, or, the differences between
the operational system used, make this really hard on low-level languages, specially in C and C++.

This compilation problem arises very quickly when we are developing big libraries (or applications)
in C or C++ that are, at the same time, cross-platform and highly optimized.
As I described at @sec-project-files, this is the whole reason why we created a whole set of separate tools named "build systems".
To abstract some of these barriers that exists in the compilation process at low-level languages.





## How to learn Zig?

Now, you might have the following thought:

> Ok! I understand that low-level languages are harder than high-level languages. But how do I learn Zig? Which tips you have for me?

First of all, you can join a community with Zig programmers to get some help:

- Reddit forum: <https://www.reddit.com/r/Zig/>;
- Discord, Slack, Telegram, and others: <https://github.com/ziglang/zig/wiki/Community>;

Now, one of the best ways to learn Zig is to simply read Zig code. Try
to read Zig code often, and things will become more clear.
A C/C++ programmer would also probably give you this same tip.
Because this strategy really works!

Now, where do you read Zig code?
I personally think that, the best way of reading Zig code is to read the source code of the
Zig Standard Library. Also, a great alternative is to read code from large Zig
codebases, such as Bun. Both of these assets are available on GitHub,
and this is great, because we can use the GitHub search bar in our advantage,
to find Zig code that fits our description.

The Zig Standard Library is available at the [`lib/std` folder](https://github.com/ziglang/zig/tree/master/lib/std)[^zig-lib-std] on
the official GitHub repository of Zig. Access this folder, and start exploring the Zig modules. If want to search for
a use case for a specific Zig function, remember to include `lang:Zig` in the GitHub search bar. This will limit
the search to only Zig modules.

[^zig-lib-std]: <https://github.com/ziglang/zig/tree/master/lib/std>

Also, a great alternative is to consult online resources and documentations.
Here is a quick list of resources that I personally use from time to time to learn
more about the language each day:

- Zig Language Reference: <https://ziglang.org/documentation/master/>;
- Zig Standard Library Reference: <https://ziglang.org/documentation/master/std/>;
- Zig Guide: <https://zig.guide/>;
- Karl Seguin Blog: <https://www.openmymind.net/>;
- Zig News: <https://zig.news/>;
- Read the code written by one of Zig core team members: <https://github.com/kubkon>;


Another great strategy to learn Zig, or honestly, to learn any language you want,
is to practice writing Zig code by solving [Advent of Code exercises](https://adventofcode.com/)[^advent-code].
There are people that already took the time to learn and solve the exercises, and they posted
their solutions on GitHub as well, so, in case you need some resource to compare while solving
the exercises, you can look at these two repositories:

- <https://github.com/SpexGuy/Zig-AoC-Template>;
- <https://github.com/fjebaker/advent-of-code-2022>;

[^advent-code]: <https://adventofcode.com/>






## Creating new objects in Zig (i.e. identifiers) {#sec-assignments}

Let's talk more about objects in Zig. Readers that have past experience
with other programming languages might know the concept of "object" through
a different name, such as: "variable" or "identifier". In this book, I choose
to use the name "object".

To create a new object (or a new "identifier") in Zig, we use
the keywords `const` or `var`. These keywords specificy if the object
that you are creating is mutable or not.

If you use `const`, then, the object you are
creating is a constant (or immutable) object, meaning that, once you declare this object, you
can no longer change the value stored inside this object.

On the other side, if you use `var`, then, you are creating a variable (or mutable) object.
So, you can change the value of this object as many times you want. Using the
keyword `var` in Zig is similar to using the keywords `let mut` in Rust.

### Constant objects vs variable objects

In the code example below, we are creating a new constant object called `age`.
This object stores a number representing the age of someone. However, this code example
does not compiles succesfully. Because on the next line of code, we are trying to change the value
of the object `age` to 25.

The `zig` compiler detects that we are trying to change
the value of an object/identifier that is constant, and because of that,
the compiler will raise a compilation error, warning us about the mistake.

```{zig}
#| eval: false
const age = 24;
// The line below is not valid!
age = 25;
```

```
t.zig:10:5: error: cannot assign to constant
    age = 25;
      ~~^~~
```

In contrast, if you use `var`, then, the object created is a variable object.
With `var` you can declare this object in your source code, and then,
change the value of this object how many times you want over future points
in your source code.

So, using the same code example exposed above, if I change the declaration of the
`age` object to use the `var` keyword, then, the program gets compiled succesfully.
Because now, the `zig` compiler detects that we are changing the value of an
object that allows this behaviour, because it is an "variable object".

```{zig}
var age: u8 = 24;
age = 25;
```




### There is no such thing as unused objects

Every object (being constant or variable) that you declare in Zig **must be used in some way**. You can give this object
to a function call, as a function argument, or, you can use it in another expression
to calculate the value of another object, or, you can call a method that belongs to this
particular object. 

It doesn't matter in which way you use it. As long as you use it.
If you try to break this rule, i.e. if your try to declare a object, but not use it,
the `zig` compiler will not compile your Zig source code, and it will issue a error
message warning that you have unused objects in your code.

Let's demonstrate this with an example. In the source code below, we declare a constant object
called `age`. If you try to compile a simple Zig program with this line of code below,
the compiler will return an error as demonstrated below:

```{zig}
#| eval: false
const age = 15;
```

```
t.zig:4:11: error: unused local constant
    const age = 15;
          ^~~
```

Everytime you declare a new object in Zig, you have two choices:

1. you either use the value of this object;
2. or you explicitly discard the value of the object;

To explicitly discard the value of any object (constant or variable), all you need to do is to assign
this object to an special character in Zig, which is the underscore (`_`).
When you assign an object to a underscore, like in the example below, the `zig` compiler will automatically
discard the value of this particular object.

You can see in the example below that, this time, the compiler did not
complain about any "unused constant", and succesfully compiled our source code.

```{zig}
// It compiles!
const age = 15;
_ = age;
```

Now, remember, everytime you assign a particular object to the underscore, this object
is essentially destroyed. It is discarded by the compiler. This means that you can no longer
use this object further in your code. It doesn't exist anymore.

So if you try to use the constant `age` in the example below, after we discarded it, you
will get a loud error message from the compiler (talking about a "pointless discard")
warning you about this mistake.

```{zig}
#| eval: false
// It does not compile.
const age = 15;
_ = age;
// Using a discarded value!
std.debug.print("{d}\n", .{age + 2});
```

```
t.zig:7:5: error: pointless discard
    of local constant
```


This same rule applies to variable objects. Every variable object must also be used in
some way. And if you assign a variable object to the underscore,
this object also get's discarded, and you can no longer use this object.



### You must mutate every variable objects

Every variable object you create in your source code must be mutated at some point
in your source code. In other words, if you declare an object as a variable
object, with the keyword `var`, if you do not change the value of this object
at some point in the future, the `zig` compiler will detect this,
and it will raise an error warning you about this mistake.

The concept behind this is that, every object you create in Zig should be
explicitly constant, unless you really need an object whose value will
change during the execution of your program.

So, if I try to declare a variable object such as `where_i_live` below,
and I do not change the value of this object in some way,
the `zig` compiler raises an error about "".

```{zig}
#| eval: false
var where_i_live = "Belo Horizonte";
_ = where_i_live;
```

```
t.zig:7:5: error: local variable is never mutated
t.zig:7:5: note: consider using 'const'
```

## Primitive Data Types

Zig have many different primitive data types available for you to use.
You can see the full list of available data types at the
[Language Reference page](https://ziglang.org/documentation/master/#Primitive-Types)[^lang-data-types].

[^lang-data-types]: <https://ziglang.org/documentation/master/#Primitive-Types>.

But here is a quick list:

- Unsigned integers: `u8`, 8-bit integer; `u16`, 16-bit integer; `u32`, 32-bit integer; `u64`, 64-bit integer; `u128`, 128-bit integer.
- Signed integers: `i8`, 8-bit integer; `i16`, 16-bit integer; `i32`, 32-bit integer; `i64`, 64-bit integer; `i128`, 128-bit integer.
- Float number: `f16`, 16-bit floating point; `f32`, 32-bit floating point; `f64`, 64-bit floating point; `f128`, 128-bit floating point;
- Boolean: `bool`, represents true or false values.
- C ABI compatible types: `c_long`, `c_char`, `c_short`, `c_ushort`, `c_int`, `c_uint`, and many others.
- Pointer sized integers: `isize` and `usize`.







## Arrays {#sec-arrays}

You create arrays in Zig by using a syntax that resembles the C syntax.
First, you specify the size of the array (i.e. the number of elements that will be stored in the array)
you want to create inside a pair of brackets.

Then, you specify the data type of the elements that will be stored inside this array.
All elements present in an array in Zig must have the same data type. For example, you cannot mix elements
of type `f32` with elements of type `i32` in the same array.

After that, you simply list the values that you want to store in this array inside
a pair of curly braces.
In the example below, I am creating two constant objets that contain different arrays.
The first object contains an array of 4 integer values, while the second object,
an array of 3 floating point values.

Now, you should notice that in the object `ls`, I am
not explicitly specifying the size of the array inside of the brackets. Instead
of using a literal value (like the value 4 that I used in the `ns` object), I am
using the special character underscore (`_`). This syntax tells the `zig` compiler
to fill this field with the number of elements listed inside of the curly braces.
So, this syntax `[_]` is for lazy (or smart) programmers who leave the job of
counting how many elements there are in the curly braces for the compiler.

```{zig}
const ns = [4]u8{48, 24, 12, 6};
const ls = [_]f64{432.1, 87.2, 900.05};
_ = ns; _ = ls;
```

### Selecting elements of the array

One very commom activity is to select specific portions of an array
you have in your source code.
In Zig, you can select a specific element from your
array, by simply providing the index of this particular
element inside brackets after the object name.
In the example below, I am selecting the third element from the
`ns` array. Notice that Zig is a "zero-index" based language,
like C, C++, Rust, Python, and many other languages.

```{zig}
const ns = [4]u8{48, 24, 12, 6};
try stdout.print("{d}\n", .{ ns[2] });
```

In contrast, you can also select specific slices (or sections) of your array, by using a
range selector. Some programmers also call these selectors of "slice selectors",
and they also exist in Rust, and have the exact same syntax as in Zig.
Anyway, a range selector is a special expression in Zig that defines
a range of indexes, and it have the syntax `start..end`.

In the example below, at the second line of code,
the `sl` object stores a slice (or a portion) of the
`ns` array. More precisely, the elements at index 1 and 2
in the `ns` array. 

```{zig}
const ns = [4]u8{48, 24, 12, 6};
const sl = ns[1..3];
_ = sl;
```

When you use the `start..end` syntax,
the "end tail" of the range selector is non-inclusive,
meaning that, the index at the end is not included in the range that is
selected from the array.
Therefore, the syntax `start..end` actually means `start..end - 1` in practice.

You can also use the syntax `start..` in your range selector.
Which tells the `zig` compiler to select the portion of the array
that begins at the `start` index until the last element of the array.
In the example below, we are selecting the range from index 1
until the end of the array.

```{zig}
const ns = [4]u8{48, 24, 12, 6};
const sl = ns[1..];
_ = sl;
```


### More on slices

As we discussed before, in Zig, you can select specific portions of an existing
array. This is called *slicing* in Zig [@zigguide], because when you select a portion
of an array, you are creating a slice object from that array.

A slice object is essentially a pointer object accompained by a length number.
The pointer object points to the first element in the slice, and the
length number tells the `zig` compiler how many elements there are in this slice.

> Slices can be thought of as a pair of `[*]T` (the pointer to the data) and a `usize` (the element count) [@zigguide].

Through the pointer contained inside the slice you can access the elements (or values)
that are inside this range (or portion) that you selected from the original array.
But the length number (which you can access through the `len` property of your slice object)
is the really big improvement (over C arrays for example) that Zig brings to the table here.

Because with this length number
the `zig` compiler can easily check if you are trying to access an index that is out of the bounds of this particular slice,
or, if you are causing any buffer overflow problems. In the example below,
we access the `len` property of the slice `sl`, which tells us that this slice
have 2 elements in it.

```{zig}
const ns = [4]u8{48, 24, 12, 6};
const sl = ns[1..3];
try stdout.print("{d}\n", .{sl.len});
```


## Control flow {#sec-zig-control-flow}

Sometimes, you need to make decisions in your program. Maybe you need to decide
wether to execute or not a specific piece of code. Or maybe,
you need to apply the same operation over a sequence of values. These kinds of tasks,
involve using structures that are capable of changing the "control flow" of our program.

In computer science, the term "control flow" usually refers to the order in which expressions (or commands)
are evaluated in a given language or program. But this term is also used to refer
to structures that are capable of changing this "evaluation order" of the commands
executed by a given language/program.

These structures are better known
by a set of terms, such as: loops, if/else statements, switch statements, among others. So,
loops and if/else statements are examples of structures that can change the "control
flow" of our program. The keywords `continue` and `break` are also examples of symbols
that can change the order of evaluation, since they can move our program to the next iteration
of a loop, or make the loop stop completely.


### If/else statements

An if/else statement performs an "conditional flow operation".
A conditional flow control (or choice control) allows you to execute
or ignore a certain block of commands based on a logical condition.
Many programmers and computer science professionals also use
the term "branching" in this case.
In essence, we use if/else statements to use the result of a logical test
to decide whether or not to execute a given block of commands.

In Zig, we write if/else statements by using the keywords `if` and `else`.
We start with the `if` keyword followed by a logical test inside a pair
of parentheses, and then, a pair of curly braces with contains the lines
of code to be executed in case the logical test returns the value `true`.

After that, you can optionally add an `else` statement. Just add the `else`
keyword followed by a pair of curly braces, with the lines of code
to executed in case the logical test defined in the `if`
returns `false`.

In the example below, we are testing if the object `x` contains a number
that is greater than 10. Judging by the output printed to the console,
we know that this logical test returned `false`. Because the output
in the console is compatible with the line of code present in the
`else` branch of the if/else statement.


```{zig}
const x = 5;
if (x > 10) {
    try stdout.print(
        "x > 10!\n", .{}
    );
} else {
    try stdout.print(
        "x <= 10!\n", .{}
    );
}
```



### For loops

A loop allows you to execute the same lines of code multiple times,
thus, creating a "repetition space" in the execution flow of your program.
Loops are particularly useful when we want to replicate the same function
(or the same set of commands) over several different inputs.

There are different types of loops available in Zig. But the most
essential of them all is probably the *for loop*. A for loop is
used to apply the same piece of code over the elements of a slice or an array.

For loops in Zig have a slightly different syntax that you are
probably used to see in other languages. You start with the `for` keyword, then, you
list the items that you want to iterate
over inside a pair of parentheses. Then, inside of a pair of pipes (`|`)
you should declare an identifier that will serve as your iterator, or,
the "repetition index of the loop".

```{zig}
#| eval: false
for (items) |value| {
    // code to execute
}
```

That is, instead of using a `(value in items)` syntax,
in Zig, for loops use the syntax `(items) |value|`. In the example
below, you can see that we are looping through the items
of the array stored in the object `name`, and printing to the
console the decimal representation of each character in this array.

If we wanted, we could also iterate through a slice (or a portion) of
the array, instead of iterating through the entire array stored in the `name` object.
Just use a range selector to select the section you want. For example,
I could provide the expression `name[0..2]` to the for loop, to iterate
just through the first 3 elements in the array.

```{zig}
const name = [_]u8{'P','e','d','r','o'};
for (name) |char| {
    try stdout.print(
        "{d} | ", .{char}
    );
}
```

In the above example we are using the value itself of each
element in the array as our iterator. But there are many situations where
we need to use an index instead of the actual values of the items.

You can do that by providing a second set of items to iterate over.
More precisely, you provide the range selector `0..` to the for loop. So,
yes, you can use two different iterators at the same time in a for
loop in Zig.

But remember from @sec-assignments that, every object
you create in Zig must be used in some way. So if you declare two iterators
in your for loop, you must use both iterators inside the for loop body.
But if you want to use just the index iterator, and not use the "value iterator",
then, you can discard the value iterator by maching the
value items to the underscore character, like in the example below:


```{zig}
#| eval: false
for (name, 0..) |_, i| {
    try stdout.print("{d} | ", .{i});
}
```

```
0 | 1 | 2 | 3 | 4 |
```


### While loops

A while loop is created from the `while` keyword. While a `for` loop
iterates through the items of an array, a `while` loop
will loop continuously, and infinitely, until a logical test
(specified by you) becomes false.

You start with the `while` keyword, then, you define a logical
expression inside a pair of parentheses, and the body of the
loop is provided inside a pair of curly braces, like in the example below:

```{zig}
var i: u8 = 1;
while (i < 5) {
    try stdout.print("{d} | ", .{i});
    i += 1;
}
```



### Using `break` and `continue`

In Zig, you can explicitly stop the execution of a loop, or, jump to the next iteration of the loop, using
the keywords `break` and `continue`, respectively. The `while` loop present in the example below, is
at first sight, an infinite loop. Because the logical value inside the parenthese will always be equal to `true`.
What makes this `while` loop stop when the `i` object reaches the count
10? Is the `break` keyword!

Inside the while loop, we have an if statement that is constantly checking if the `i` variable
is equal to 10. Since we are increasing the value of this `i` variable at each iteration of the
while loop. At some point, this `i` variable will be equal to 10, and when it does, the if statement
will execute the `break` expression, and, as a result, the execution of the while loop is stopped.

Notice the `expect()` function from the Zig standard library after the while loop.
This `expect()` function is an "assert" type of function.
This function checks if the logical test provided is equal to true. If this logical test is false,
the function raises an assertion error. But it is equal to true, then, the function will do nothing.

```{zig}
var i: usize = 0;
while (true) {
    if (i == 10) {
        break;
    }
    i += 1;
}
try std.testing.expect(i == 10);
try stdout.print("Everything worked!", .{});
```

Since this code example was executed succesfully by the `zig` compiler,
without raising any errors, then, we known that, after the execution of while loop,
the `i` variable is equal to 10. Because if it wasn't equal to 10, then, an error would
be raised by `expect()`.

Now, in the next example, we have an use case for
the `continue` keyword. The if statement is constantly
checking if the current index is a multiple of 2. If
it is, then we jump to the next iteration of the loop
directly. But it the current index is not a multiple of 2,
then, the loop will simply print this index to the console.

```{zig}
const ns = [_]u8{1,2,3,4,5,6};
for (ns) |i| {
    if ((i % 2) == 0) {
        continue;
    }
    try stdout.print("{d} | ", .{i});
}
```


## Structs and OOP {#sec-structs-and-oop}

Zig is a language more closely related to C (which is a procedural language), than it is to C++ or Java (which are object-oriented languages). Because of that, you do not
have advanced OOP (Object-Oriented Programming) patterns available in Zig, such as classes, interfaces or
class inheritance. Nonetheless, OOP in Zig is still possible by using struct definitions.

With struct definitions, you can create (or define) a new data type in Zig. These struct definitions work the same way as they work in C.
You give a name to this new struct (or, to this new data type you are creating), then, you list the data members of this new struct. You can
also register functions inside this struct, and they become the methods of this particular struct (or data type), so that, every object
that you create with this new type, will always have these methods available and associated with them.

In C++, when we create a new class, we normally have a constructor method (or, a constructor function) to construct or to instantiate every object
of this particular class, and you also have a destructor method (or a destructor function) that
is the function responsible for destroying every object of this class.

In Zig, we normally declare the constructor and the destructor methods
of our structs, by declaring an `init()` and a `deinit()` methods inside the struct.
This is just a naming convention that you will find across the entire Zig standard library.
So, in Zig, the `init()` method of a struct is normally the constructor method of the class represented by this struct.
While the `deinit()` method is the method used for destroying an existing instance of that struct.

Both the `init()` and `deinit()` methods are used extensively in Zig code, and you will see both of them at @sec-arena-allocator. In this section,
I presented the `ArenaAllocator()`, which is a special type of allocator object that receives a second (child)
of allocator object at instantiation. We used the `init()` to create a new `ArenaAllocator()` object,
then, on the next line, we also used the `deinit()` method in conjunction with the `defer` keyword, to destroy this arena allocator object at the end
of the current scope.

But, as another example, let's build a simple `User` struct to represent an user of some sort of system.
If you look at the `User` struct below, you can see the `struct` keyword, and inside of a
pair of curly braces, we write the struct's body.

Notice the data members of this struct, `id`, `name` and `email`. Every data member have it's
type explicitly annotated, with the colon character (`:`) syntax that we described earlier at @sec-root-file.
But also notice that every line in the struct body that describes a data member, ends with a comma character (`,`).
So every time you declare a data member in your Zig code, always end the line with a comma character, instead
of ending it with the traditional semicolon character (`;`).

Next, also notice in this example, that we registrated an `init()` function as a method
of this `User` struct. This `init()` method is the constructor method that you use to instantiate
every new `User` object. That is why this `init()` function return an `User` object as result.


```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
const User = struct {
    id: u64,
    name: []const u8,
    email: []const u8,

    pub fn init(id: u64,
                name: []const u8,
                email: []const u8) User {

        return User {
            .id = id,
            .name = name,
            .email = email
        };
    }

    pub fn print_name(self: User) !void {
        try stdout.print("{s}\n", .{self.name});
    }
};

pub fn main() !void {
    const u = User.init(1, "pedro", "email@gmail.com");
    try u.print_name();
}
```

The `pub` keyword plays an important role in struct declarations, and OOP in Zig.
Every method that you declare in your struct that is marked with the keyword `pub`,
becomes a public method of this particular struct.

So every method that you create in your struct, is, at first, a private method
of that struct. Meaning that, this method can only be called from within this
struct. But, if you mark this method as public, with the keyword `pub`, then,
you can call the method directly from the `User` object you have
in your code.

In other words, the functions marked by the keyword `pub`
are members of the public API of that struct.
For example, if I did not marked the `print_name()` method as public,
then, I could not execute the line `u.print_name()`. Because I would
not be authorized to call this method directly in my code.




## Anonymous struct literals

In traditional struct literals, you can specify the type of the struct literal
you are writing just before the opening curly braces. So, I could
write a struct literal of type `User` that we defined in the previous section like
this:

```{zig}
#| eval: false
const eu = User {
    .id = 1,
    .name = "Pedro",
    .email = "someemail@gmail.com"
};
_ = eu;
```

However, in Zig, we can also write an anonymous struct literal. That is, you can write a
struct literal, but not especify explicitly the type of this particular struct.
An anonymous struct is written by using the syntax `.{}`. So, we essentially
replace the explicit type of the struct literal with a dot character (`.`).

When you do that, the type of this struct literal is automatically inferred by the `zig` compiler.
In essence, the `zig` compiler will look for some hint of what is the type of that struct.
It can be the type annotation of an function argument,
or the return type annotation of the function you are using, or the type annotation
of a variable.
If the compiler do find such type annotation, then, it will use this
type in your literal struct. 

Anonymous structs are very commom to use on function arguments in Zig.
One example that you have seen already constantly, is the `print()`
function from the `stdout`.
This function takes two arguments.
The first argument, is a template string, which should
contain string format specifiers in it, which tells how the values provided
in the second argument should be printed into the message.

While the second argument is a struct literal that lists the values
to be printed into the template message specified in the first argument.
You normally want to use an anonymous struct literal here, so that, the
`zig` compiler do the job of specifying the type of this particular
anonymous struct for you.

```{zig}
#| auto_main: false
const std = @import("std");
pub fn main() !void {
    const stdout = std.io.getStdOut().writer();
    try stdout.print("Hello, {s}!\n", .{"world"});
}
```




## How strings work in Zig? {#sec-zig-strings}

The first project that we are going to build and discuss in this book is a base64 encoder/decoder (@sec-base64).
But in order for us to build such a thing, we need to get a better understanding on how strings work in Zig.
So let's discuss this specific aspect of Zig.

In Zig, a string literal (or a string object if you prefer) is a pointer to a null-terminated array
of bytes. Each byte in this array is represented by an `u8` value, which is an unsigned 8 bit integer,
so, it is equivalent to the C data type `unsigned char`.

Zig always assumes that this sequence of bytes is UTF-8 encoded. This might not be true for every
sequence of bytes you have it, but is not really Zig's job to fix the encoding of your strings
(you can use [`iconv`](https://www.gnu.org/software/libiconv/)[^libiconv] for that).
Today, most of the text in our modern world, specially on the web, should be UTF-8 encoded.
So if your string literal is not UTF-8 encoded, then, you will likely
have problems in Zig.

[^libiconv]: <https://www.gnu.org/software/libiconv/>

Let’s take for example the word "Hello". In UTF-8, this sequence of characters (H, e, l, l, o)
is represented by the sequence of decimal numbers 72, 101, 108, 108, 111. In xecadecimal, this
sequence is `0x48`, `0x65`, `0x6C`, `0x6C`, `0x6F`. So if I take this sequence of hexadecimal values,
and ask Zig to print this sequence of bytes as a sequence of characters (i.e. a string), then,
the text "Hello" will be printed into the terminal:

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();

pub fn main() !void {
    const bytes = [_]u8{0x48, 0x65, 0x6C, 0x6C, 0x6F};
    try stdout.print("{s}\n", .{bytes});
}
```


If you want to see the actual bytes that represents a string in Zig, you can use
a `for` loop to iterate trough each byte in the string, and ask Zig to print each byte as an hexadecimal
value to the terminal. You do that by using a `print()` statement with the `X` formatting specifier,
like you would normally do with the [`printf()` function](https://cplusplus.com/reference/cstdio/printf/)[^printfs] in C.

[^printfs]: <https://cplusplus.com/reference/cstdio/printf/>

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    try stdout.print("Bytes that represents the string object: ", .{});
    for (string_literal) |byte| {
        try stdout.print("{X} ", .{byte});
    }
    try stdout.print("\n", .{});
}
```

### Strings in C

At first glance, this looks very similar to how C treats strings as well. That is, string values
in C are also treated internally as an array of bytes, and this array is also null-terminated.

But one key difference between a Zig string and a C string, is that Zig also stores the length of
the array inside the string object. This small detail makes your code safer, because is much
easier for the Zig compiler to check if you are trying to access an element that is "out of bounds", i.e. if
your trying to access memory that does not belong to you.

To achieve this same kind of safety in C, you have to do a lot of work that kind of seems pointless.
So getting this kind of safety is not automatic and much harder to do in C. For example, if you want
to track the length of your string troughout your program in C, then, you first need to loop through
the array of bytes that represents this string, and find the null element (`'\0'`) position to discover
where exactly the array ends, or, in other words, to find how much elements the array of bytes contain.

To do that, you would need something like this in C. In this example, the C string stored in
the object `array` is 25 bytes long:

```c
#include <stdio.h>
int main() {
    char* array = "An example of string in C";
    int index = 0;
    while (1) {
        if (array[index] == '\0') {
            break;
        }
        index++;
    }
    printf("Number of elements in the array: %d\n", index);
}
```

```
Number of elements in the array: 25
```

But in Zig, you do not have to do this, because the object already contains a `len`
field which stores the length information of the array. As an example, the `string_literal` object below is 43 bytes long:


```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    try stdout.print("{d}\n", .{string_literal.len});
}
```


### A better look at the object type

Now, we can inspect better the type of objects that Zig create. To check the type of any object in Zig, you can use the
`@TypeOf()` function. If we look at the type of the `simple_array` object below, you will find that this object
is a array of 4 elements. Each element is a signed integer of 32 bits which corresponds to the data type `i32` in Zig.
That is what an object of type `[4]i32` is.

But if we look closely at the type of the `string_literal` object below, you will find that this object is a
constant pointer (hence the `*const` annotation) to an array of 43 elements (or 43 bytes). Each element is a
single byte (more precisely, an unsigned 8 bit integer - `u8`), that is why we have the `[43:0]u8` portion of the type below.
In other words, the string stored inside the `string_literal` object is 43 bytes long.
That is why you have the type `*const [43:0]u8` below.

In the case of `string_literal`, it is a constant pointer (`*const`) because the object `string_literal` is declared
as constant in the source code (in the line `const string_literal = ...`). So, if we changed that for some reason, if
we declare `string_literal` as a variable object (i.e. `var string_literal = ...`), then, `string_literal` would be
just a normal pointer to an array of unsigned 8-bit integers (i.e. `* [43:0]u8`).

Now, if we create an pointer to the `simple_array` object, then, we get a constant pointer to an array of 4 elements (`*const [4]i32`),
which is very similar to the type of the `string_literal` object. This demonstrates that a string object (or a string literal)
in Zig is already a pointer to an array.

Just remember that a "pointer to an array" is different than an "array". So a string object in Zig is a pointer to an array
of bytes, and not simply an array of bytes.


```{zig}
#| auto_main: false
#| eval: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    const simple_array = [_]i32{1, 2, 3, 4};
    try stdout.print("Type of array object: {}", .{@TypeOf(simple_array)});
    try stdout.print(
        "Type of string object: {}",
        .{@TypeOf(string_literal)}
    );
    try stdout.print(
        "Type of a pointer that points to the array object: {}",
        .{@TypeOf(&simple_array)}
    );
}
```

```
Type of array object: [4]i32
Type of string object: *const [43:0]u8
Type of a pointer that points to
    the array object: *const [4]i32
```


### Byte vs unicode points

Is important to point out that each byte in the array is not necessarily a single character.
This fact arises from the difference between a single byte and a single unicode point.

The encoding UTF-8 works by assigning a number (which is called a unicode point) to each character in
the string. For example, the character "H" is stored in UTF-8 as the decimal number 72. This means that
the number 72 is the unicode point for the character "H". Each possible character that can appear in a
UTF-8 encoded string have its own unicode point.

For example, the Latin Capital Letter A With Stroke (Ⱥ) is represented by the number (or the unicode point)
570. However, this decimal number (570) is higher than the maximum number stored inside a single byte, which
is 255. In other words, the maximum decimal number that can be represented with a single byte is 255. That is why,
the unicode point 570 is actually stored inside the computer’s memory as the bytes `C8 BA`.

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "Ⱥ";
    try stdout.print("Bytes that represents the string object: ", .{});
    for (string_literal) |char| {
        try stdout.print("{X} ", .{char});
    }
}
```


This means that to store the character Ⱥ in an UTF-8 encoded string, we need to use two bytes together
to represent the number 570. That is why the relationship between bytes and unicode points is not always
1 to 1. Each unicode point is a single character in the string, but not always a single byte corresponds
to a single unicode point.

All of this means that if you loop trough the elements of a string in Zig, you will be looping through the
bytes that represents that string, and not through the characters of that string. In the Ⱥ example above,
the for loop needed two iterations (instead of a single iteration) to print the two bytes that represents this Ⱥ letter.

Now, all english letters (or ASCII letters if you prefer) can be represented by a single byte in UTF-8. As a
consequence, if your UTF-8 string contains only english letters (or ASCII letters), then, you are lucky. Because
the number of bytes will be equal to the number of characters in that string. In other words, in this specific
situation, the relationship between bytes and unicode points is 1 to 1.

But on the other side, if your string contains other types of letters… for example, you might be working with
text data that contains, chinese, japanese or latin letters, then, the number of bytes necessary to represent
your UTF-8 string will likely be much higher than the number of characters in that string.

If you need to iterate through the characters of a string, instead of its bytes, then, you can use the
`std.unicode.Utf8View` struct to create an iterator that iterates through the unicode points of your string.

In the example below, we loop through the japanese characters “アメリカ”. Each of the four characters in
this string is represented by three bytes. But the for loop iterates four times, one iteration for each
character/unicode point in this string:

```{zig}
#| auto_main: false
#| eval: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    var utf8 = (
        (try std.unicode.Utf8View.init("アメリカ"))
            .iterator()
    );
    while (utf8.nextCodepointSlice()) |codepoint| {
        try stdout.print(
            "got codepoint {}\n",
            .{std.fmt.fmtSliceHexUpper(codepoint)}
        );
    }
}
```

```
got codepoint E382A2
got codepoint E383A1
got codepoint E383AA
got codepoint E382AB
```



## Other parts of Zig

We already learned a lot about Zig's syntax, and also, some pretty technical
details about it. Just as quick recap:

- We talked about how to write functions at @sec-root-file and @sec-main-file.
- How to create new objects/identifiers in Zig at @sec-root-file and specially at @sec-assignments.
- Basic control flow syntax at @sec-zig-control-flow.
- How strings work in Zig at @sec-zig-strings.
- How to use arrays and slices at @sec-arrays.
- How to import functionality from other Zig modules at @sec-root-file.
- How Object-Oriented programming can be done in Zig through *Struct declarations* at @sec-structs-and-oop.


But, for now, this amount of knowledge is enough for us to continue with this book.
Later, over the next chapters we will still talk more about other parts of
Zig's syntax that are also equally important as the other parts. Such as:

- Enums;
- Pointers;
- Error handling with `try` and `catch`;
- Unit tests;
- Vectors;
- Build System;




