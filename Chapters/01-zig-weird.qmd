---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = TRUE
)
```

# Introducing Zig

In this chapter, I want to introduce you to the world of Zig.
Despite it's rapidly growing on the last year, Zig is still a very young language.
As a consequence, it's world is rather wild and poorly explored.

This book is my attempt to help you on your personal journey for understanding
and exploring the exciting world of Zig.

## What is Zig?

Zig is a modern low-level programming language. Some programmers interpret
Zig as the "modern C" language. It is a simple language like C, but with some
modern features.


## Creating variables in Zig

To create a new variable (or a new object) in Zig, we use
the keywords `const` or `var`. If you use `const`, then, the object you are
creating is a constant object, meaning that, once you declare this object, you
can no longer change the value stored inside this object.

In contrast, if you use `var`, then, the object created is a variable object.
It allows you to declare this object in a poin in your source code.




## There is no such thing as unused variables

Every variable that you declare in Zig **must be used in some way**, like giving this variable
to a function call, as a function argument, or, using it in another expression
to calculate the value of another variable, or, calling a method that belongs to this
particular variable.

If you try to break this rule, i.e. if your try to declare a variable, but not use it,
the `zig` compiler will not compile your Zig source code, and it will issue a error
message warning that you have unused variables in your code.

Let's demonstrate this with an example. In the source code below, we declare a variable
called `age`. If you try to compile a simple Zig program with this line of code below,
the compiler will return an error as demonstrated below:

```{zig}
#| eval: false
const age = 15;
```

```
t.zig:4:11: error: unused local constant
    const age = 15;
          ^~~
```

Everytime you declare a new variable in Zig, you have two choices:

1. you either use the value of this variable;
2. or you explicitly discard the value of this variable;

To explicitly discard the value of a variable, all you need to do is to assign
this variable to an special character in Zig, which is the underscore (`_`).
When you assign a variable to a underscore, like in the example below, the `zig` compiler will automatically
discard the value of this particular variable.

You can see in the example below that, this time, the compiler did not
complain about any "unused variable", and succesfully compiled our source code.

```{zig}
// It compiles!
const age = 15;
_ = age;
```

Now, remember, everytime you assign a particular variable to the underscore, this variable
is essentially destroyed. It is discarded by the compiler. This means that you can no longer
use this variable further in your code. It doesn't exist anymore.

So if you try to use the variable `age` in the example below, after we discarded it, you
will get a loud error message from the compiler (talking about a "pointless discard")
warning you about this mistake.

```{zig}
#| eval: false
// It does not compile.
const age = 15;
_ = age;
// Using a discarded value!
std.debug.print("{d}\n", .{age + 2});
```

```
t.zig:7:5: error: pointless discard
    of local constant
```



## Variable




## How strings work in Zig? {#sec-zig-strings}

The first project that we are going to build and discuss in this book is a base64 encoder/decoder.
But in order for us to build such a thing, we need to get a better understanding on how strings work in Zig.
So let's discuss this specific aspect of Zig.

In Zig, a string literal (or a string object if you prefer) is a pointer to a null-terminated array
of bytes. Each byte in this array is represented by an `u8` value, which is an unsigned 8 bit integer,
so, it is equivalent to the C data type `unsigned char`.

Zig always assumes that this sequence of bytes is UTF-8 encoded. This might not be true for every
sequence of bytes you have it, but is not really Zig's job to fix the encoding of your strings
(you can use [`iconv`](https://www.gnu.org/software/libiconv/)[^libiconv] for that).
Today, most of the text in our modern world, specially on the web, should be UTF-8 encoded.
So if your string literal is not UTF-8 encoded, then, you will likely
have problems in Zig.

[^libiconv]: <https://www.gnu.org/software/libiconv/>

Let’s take for example the word "Hello". In UTF-8, this sequence of characters (H, e, l, l, o)
is represented by the sequence of decimal numbers 72, 101, 108, 108, 111. In xecadecimal, this
sequence is `0x48`, `0x65`, `0x6C`, `0x6C`, `0x6F`. So if I take this sequence of hexadecimal values,
and ask Zig to print this sequence of bytes as a sequence of characters (i.e. a string), then,
the text "Hello" will be printed into the terminal:

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();

pub fn main() !void {
    const bytes = [_]u8{0x48, 0x65, 0x6C, 0x6C, 0x6F};
    try stdout.print("{s}\n", .{bytes});
}
```


If you want to see the actual bytes that represents a string in Zig, you can use
a `for` loop to iterate trough each byte in the string, and ask Zig to print each byte as an hexadecimal
value to the terminal. You do that by using a `print()` statement with the `X` formatting specifier,
like you would normally do with the [`printf()` function](https://cplusplus.com/reference/cstdio/printf/)[^printfs] in C.

[^printfs]: <https://cplusplus.com/reference/cstdio/printf/>

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    try stdout.print("Bytes that represents the string object: ", .{});
    for (string_literal) |byte| {
        try stdout.print("{X} ", .{byte});
    }
    try stdout.print("\n", .{});
}
```

### Strings in C

At first glance, this looks very similar to how C treats strings as well. That is, string values
in C are also treated internally as an array of bytes, and this array is also null-terminated.

But one key difference between a Zig string and a C string, is that Zig also stores the length of
the array inside the string object. This small detail makes your code safer, because is much
easier for the Zig compiler to check if you are trying to access an element that is "out of bounds", i.e. if
your trying to access memory that does not belong to you.

To achieve this same kind of safety in C, you have to do a lot of work that kind of seems pointless.
So getting this kind of safety is not automatic and much harder to do in C. For example, if you want
to track the length of your string troughout your program in C, then, you first need to loop through
the array of bytes that represents this string, and find the null element (`'\0'`) position to discover
where exactly the array ends, or, in other words, to find how much elements the array of bytes contain.

To do that, you would need something like this in C. In this example, the C string stored in
the object `array` is 25 bytes long:

```c
#include <stdio.h>
int main() {
    char* array = "An example of string in C";
    int index = 0;
    while (1) {
        if (array[index] == '\0') {
            break;
        }
        index++;
    }
    printf("Number of elements in the array: %d\n", index);
}
```

```
Number of elements in the array: 25
```

But in Zig, you do not have to do this, because the object already contains a `len`
field which stores the length information of the array. As an example, the `string_literal` object below is 43 bytes long:


```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    try stdout.print("{d}\n", .{string_literal.len});
}
```


### A better look at the object type

Now, we can inspect better the type of objects that Zig create. To check the type of any object in Zig, you can use the
`@TypeOf()` function. If we look at the type of the `simple_array` object below, you will find that this object
is a array of 4 elements. Each element is a signed integer of 32 bits which corresponds to the data type `i32` in Zig.
That is what an object of type `[4]i32` is.

But if we look closely at the type of the `string_literal` object below, you will find that this object is a
constant pointer (hence the `*const` annotation) to an array of 43 elements (or 43 bytes). Each element is a
single byte (more precisely, an unsigned 8 bit integer - `u8`), that is why we have the `[43:0]u8` portion of the type below.
In other words, the string stored inside the `string_literal` object is 43 bytes long.
That is why you have the type `*const [43:0]u8` below.

In the case of `string_literal`, it is a constant pointer (`*const`) because the object `string_literal` is declared
as constant in the source code (in the line `const string_literal = ...`). So, if we changed that for some reason, if
we declare `string_literal` as a variable object (i.e. `var string_literal = ...`), then, `string_literal` would be
just a normal pointer to an array of unsigned 8-bit integers (i.e. `* [43:0]u8`).

Now, if we create an pointer to the `simple_array` object, then, we get a constant pointer to an array of 4 elements (`*const [4]i32`),
which is very similar to the type of the `string_literal` object. This demonstrates that a string object (or a string literal)
in Zig is already a pointer to an array.

Just remember that a "pointer to an array" is different than an "array". So a string object in Zig is a pointer to an array
of bytes, and not simply an array of bytes.


```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "This is an example of string literal in Zig";
    const simple_array = [_]i32{1, 2, 3, 4};
    try stdout.print("Type of array object: {}", .{@TypeOf(simple_array)});
    try stdout.print(
        "Type of string object: {}",
        .{@TypeOf(string_literal)}
    );
    try stdout.print(
        "Type of a pointer that points to the array object: {}",
        .{@TypeOf(&simple_array)}
    );
}
```


### Byte vs unicode points

Is important to point out that each byte in the array is not necessarily a single character.
This fact arises from the difference between a single byte and a single unicode point.

The encoding UTF-8 works by assigning a number (which is called a unicode point) to each character in
the string. For example, the character "H" is stored in UTF-8 as the decimal number 72. This means that
the number 72 is the unicode point for the character "H". Each possible character that can appear in a
UTF-8 encoded string have its own unicode point.

For example, the Latin Capital Letter A With Stroke (Ⱥ) is represented by the number (or the unicode point)
570. However, this decimal number (570) is higher than the maximum number stored inside a single byte, which
is 255. In other words, the maximum decimal number that can be represented with a single byte is 255. That is why,
the unicode point 570 is actually stored inside the computer’s memory as the bytes `C8 BA`.

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    const string_literal = "Ⱥ";
    try stdout.print("Bytes that represents the string object: ", .{});
    for (string_literal) |char| {
        try stdout.print("{X} ", .{char});
    }
}
```


This means that to store the character Ⱥ in an UTF-8 encoded string, we need to use two bytes together
to represent the number 570. That is why the relationship between bytes and unicode points is not always
1 to 1. Each unicode point is a single character in the string, but not always a single byte corresponds
to a single unicode point.

All of this means that if you loop trough the elements of a string in Zig, you will be looping through the
bytes that represents that string, and not through the characters of that string. In the Ⱥ example above,
the for loop needed two iterations (instead of a single iteration) to print the two bytes that represents this Ⱥ letter.

Now, all english letters (or ASCII letters if you prefer) can be represented by a single byte in UTF-8. As a
consequence, if your UTF-8 string contains only english letters (or ASCII letters), then, you are lucky. Because
the number of bytes will be equal to the number of characters in that string. In other words, in this specific
situation, the relationship between bytes and unicode points is 1 to 1.

But on the other side, if your string contains other types of letters… for example, you might be working with
text data that contains, chinese, japanese or latin letters, then, the number of bytes necessary to represent
your UTF-8 string will likely be much higher than the number of characters in that string.

If you need to iterate through the characters of a string, instead of its bytes, then, you can use the
`std.unicode.Utf8View` struct to create an iterator that iterates through the unicode points of your string.

In the example below, we loop through the japanese characters “アメリカ”. Each of the four characters in
this string is represented by three bytes. But the for loop iterates four times, one iteration for each
character/unicode point in this string:

```{zig}
#| auto_main: false
const std = @import("std");
const stdout = std.io.getStdOut().writer();
pub fn main() !void {
    var utf8 = (
        (try std.unicode.Utf8View.init("アメリカ"))
            .iterator()
    );
    while (utf8.nextCodepointSlice()) |codepoint| {
        try stdout.print(
            "got codepoint {}\n",
            .{std.fmt.fmtSliceHexUpper(codepoint)}
        );
    }
}
```


