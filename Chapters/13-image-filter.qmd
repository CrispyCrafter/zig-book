---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "lib"
)
```


# Project 4 - Developing an image filter

In this chapter we are going to build a new small project. The objective of
this project is to build a program in Zig that applies a filter over an image.
More specifically, a "grayscale filter". This filter essentially transforms
any color image into a grayscale image.

We are going to use the image displayed at @fig-pascal as the example in this project.
In other words, we are going to transform this colored image, into a grayscale image,
using our "image filter program" written in Zig.

![A photo of the chilean-american actor Pedro Pascal. Source: Google Images.](../ZigExamples/image_filter/pedro_pascal.png){#fig-pascal}

We don't need to write a lot of code to build such "image filter program". However, in order for us
to build such program, we first need to understand how digital images work. That is why we begin this chapter
by explaining the theory behind digital images and how colors are represented in modern computers.
We also give a brief explanation about the file format PNG (Portable Network Graphics), which is used
in the example images.

At the end of this chapter, we will have a full example of a program that takes the PNG image displayed at @fig-pascal
as input, and writes a new image to the current working directory that is the grayscale version of the input image.
This grayscale version of @fig-pascal that is written by the program is exposed at @fig-pascal-gray.

![The grayscale version of the photo.](../ZigExamples/image_filter/pedro_pascal_filter.png){#fig-pascal-gray}


## How we see things? {#sec-eyes}

In this section, I want to briefly describe to you how we (humans) actually see things with our own eyes.
I mean, how our eyes work? If you do have a very basic understanding of how our eyes work, you will understand
more easily how digital images are made. Because the techniques used to produce a digital image
were developed by taking a lot of inspiration from how our human eyes work.

You can interpret a human eye as a light sensor, or, a light receptor. The eye receives some amount of light as input,
and it interprets the colors that are present in this "amount of light".
If no amount of light hits the eye, then, the eye cannot extract color from it, and as result,
we end up seeing nothing, or, more precisely, we see complete blackness.

So everything depends on light. What we actually see are the colors (blue, red, orange, green, purple, yellow, etc.) that
are being reflected from the light that is hitting our eyes. **Light is the source of all colors!**
This is what Isaac Newton discovered on his famous prism experiment[^newton] in the 1660s.

[^newton]: <https://library.si.edu/exhibition/color-in-a-new-light/science>

Inside our eyes, we have a specific type of cell called the "cone cell".
Our eye have three different types, or, three different versions of these "cone cells".
Each of these three types of cone cell is very sensitive to a specific spectrum of the light,
which are the spectrums that define the colors red, green and blue.
So, in summary, our eyes have specific types of cells that
are highly sensitive to these three colors (red, green and blue).

These are the cells responsible for perceiving the color present in the light that hits our eyes.
As a result, our eyes perceives color as a mixture of these three colors (red, green and blue). By having an amount
of each one of these three colors, and mixing them together, we can get any other visible color
that we want. So every color that we see is perceived as a specific mixture of blues, greens and reds,
like 30% of red, plus 20% of green, plus 50% of blue.

When these cone cells perceive (or, detect) the colors that are found in the
light that is hitting our eyes, these cells produce electrical signals and sent them to the brain.
Our brain interprets these electrical signals, and use them to form the image that we are seeing
inside our head.

Based on what we have discussed here, the items below describes the sequence of events that
composes this very simplified version of how our human eyes work:

1. Light hits our eyes.
1. The cone cells perceive the colors that are present in this light.
1. Cone cells produce electrical signals that describes the colors that were perceived in the light.
1. The electrical signals are sent to the brain.
1. Brain interprets these signals, and form the image based on the colors identified by these electrical signals.


## How digital images work? {#sec-digital-img}

A digital image is a "digital representation" of an image that we see with our eyes.
In other words, a digital image is a "digital representation" of the colors that we see
and perceive through the light.
In the digital world, we have two types of images, which are: vector image and raster image.
Vector images are not described here. So just remember that every single aspect that we discuss
here in this chapter about digital images **are related solely to raster images**, and not vector images.

Raster images are digital images that are represented as a 2D (two dimensional) matrix
of pixels. In other words, every raster image is basically a rectangle of pixels. Each pixel have a particular color.
So, a raster image is just a rectangle of pixels, and each of these pixels are displayed in the screen of your computer (or the screen
of any other device, e.g. laptop, tablet, smartphone, etc.) as a color.

@fig-raster demonstrates this idea. If you take any raster image, and you zoom into it very hard,
you will see the actual pixels of the image. Although JPEG and PNG are file formats to store raster images,
when you zoom into JPEG, PNG, and some other types of raster image files, you usually do not quite see the pixels.
That is because most of these file formats implement techniques that affect how the pixels are displayed,
with the objective of increasing the details in the image. The most famous of these techniques is anti-aliasing,
which you probably know from video-games. But nevertheless, the pixels are still there! They are
just displayed differently in JPEG/PNG files.

![Zooming over a raster image to see the pixels. Source: Google Images.](../Figures/imagem-raster.png.webp){#fig-raster}

The more pixels the image has, the more information and detail we can include in the image.
The more precise, sharp and pretty will look the image. That is why photographic cameras
usually produces big raster images, with several megapixels of resolution, to include as much detail as possible into the final image.
As an example, a digital image with dimensions of 1920 pixels of width and 1080 pixels of height, would be a image that
contains $1920 \times 1080 = 2073600$ pixels in total. You could also say that the "total area" of the image is
of 2073600 pixels, although the concept of "area" is not very used here in computer graphics.

Most digital images we see in our modern world uses the RGB color model. RGB stands for (red, green and blue) if you did not
detected that yet. So the color of each pixel in these raster images are usually
represented as a mixture of red, green and blue, just like in our eyes. That is, the color of each pixel is identified by a set of
three different integer values. Each integer value identifies the "amount" of each color (red, green and blue).
For example, the set `(199, 78, 70)` identifies a color that is close to red. We have 199 of red, 78 of green,
and 70 of blue. In contrast, the set `(129, 77, 250)` describes a color that is more close to purple. Et cetera.



### Images are displayed from top to bottom

This is not a rule written in stone, but the big majority of digital images are displayed from top
to bottom and left to right. Most computers screens also follow this pattern. So, the first pixels
in the image are the ones that are at the top and left corner of the image. You can find a visual representation
of this logic at @fig-img-display.

Also notice in @fig-img-display that, since a digital image is essentially a 2D matrix of pixels,
the image is organized into rows and columns of pixels. The columns are defined by the horizontal x axis,
while the rows are defined by the vertical y axis.

Each pixel (i.e. the gray rectangles) exposed at @fig-img-display contains a number inside of it.
These numbers are the indexes of the pixels. You can notice that the first pixels are in the top and left
corner, and also, that the indexes of these pixels "grow to the sides", or, in other words, they grow in the direction of the horizontal x axis.
This means that most digital images are usually organized as rows of pixels. So when these digital images are
displayed, the screen display the first row of pixels, then, the second row, then, the third row, etc.

![How the pixels of raster images are displayed.](./../Figures/image-display.png){#fig-img-display}






### Representing the matrix of pixels in code {#sec-pixel-repr}

Ok, we know already that digital images are represented as a 2D matrix of pixels.
But we do not have a notion of a 2D matrix in Zig. Most low-level languages in general (Zig, C, Rust, etc.) do not have such notion.
So how do we represent such matrix of pixels in Zig, or any other low-level language.
The strategy that most programmers choose is to just use a normal 1D array to store the values of
this 2D matrix. In other words, you just create an normal 1D array, and store all values from both dimensions into this 1D array.


Now, remember, a digital image is represented as a
2D matrix of pixels, and each pixel is represented by 3 unsigned 8bit-integer values.
So, if we have for example a very small image of dimensions 4x3, then,
we have 12 pixels in total in this image. As a result, we need to create a normal array that
can store $3 \times 12 = 36$ integer values, more precisely, an array of 36 `u8` values.

The reason why unsigned 8-bit integer (`u8`) values are used to represent the amounts of each color,
instead of any other integer type, is because they take the minimum amount of space as possible, or,
the minimum amount of bits as possible. Which helps to reduces the binary size of the image, i.e. of the 2D matrix.
Also, they convey a good amount of precision and detail about the colors, even though they can represent
a relatively small range (from 0 to 255) of "color amounts".
The `matrix` object exposed below could be an example of this 4x3 image.

```{zig}
#| auto_main: false
const matrix = [_]u8{
    201, 10, 25, 185, 65, 70,
    65, 120, 110, 65, 120, 117,
    98, 95, 12, 213, 26, 88,
    143, 112, 65, 97, 99, 205,
    234, 105, 56, 43, 44, 216,
    45, 59, 243, 211, 209, 54,
};
```

The three first integer values are the color amounts of the first pixel.
While the next three integer are the colors amounts for the second pixel.
And the sequence goes on in this pattern. So the size of the array that stores
the values of the pixels from a raster image is a multiple of 3.
In this case, the array have size of 36.

The size of the array can also be a multiple of 4 if a transparency amount is
also included into the raster image. In other words, there are some raster images
that follow a different color model, which is the RGBA (red, green, blue and alpha)
color model. The "alpha" corresponds to an amount of transparency in the pixel.
So every pixel in a RGBA image is represented by a red, green, blue and alpha values.

Most raster images uses the standard RGB model, so, for the most part, you will
see arrays sizes that are multiples of 3. But some images, specially the ones
that are stored in PNG files, might be using the RGBA model, and, therefore, are
represented by an array whose size is a multiple of 4.

In our case here, the example image of our project (@fig-pascal) is a raster image
stored in a PNG file, and this specific image is using the RGBA color model. So
each pixel in the image is represented by 4 different integer values, and, as consequence,
to store this image in our Zig code, we need to create an array whose size is a multiple of 4.


## The PNG library we are going to use

Let's begin our project by focusing on writing the necessary Zig code to
read the data from the PNG file. In other words, in this section, we want
to read the PNG file exposed at @fig-pascal, and parse it's data to extract the 2D matrix of pixels
that represents the image.

As we have discussed at @sec-pixel-repr, the image that we are using as example here
is a PNG file that uses the RGBA color model, and, threfore, each pixel of the image
is represented by 4 integer values. You can download this image by visiting the `ZigExamples/image_filter`
[folder at the official repository of this book](https://github.com/pedropark99/zig-book/tree/main/ZigExamples/image_filter)[^img-filter-folder].
You can also find in this folder the complete source code of this small project that we
are developing here.

[^img-filter-folder]: <https://github.com/pedropark99/zig-book/tree/main/ZigExamples/image_filter>

There are some C libraries available that we can use to read and parse PNG files.
The most famous and used of all is the `libpng`, which is the "official library" for reading and writing
PNG files. This C library is available in most operating system. But this C library is very known
for being a little complex and hard to use.

That is why, I'm going to use a more modern alternative here in this project, which is the `libspng` library.
I have choose to use this C library here, because it is much, much
simpler to use than `libpng`, and also, offers very good performance for all operations.
You can checkout the [official website of the library](https://libspng.org/)[^libspng]
to know more about it.
You will also find there, some documentation that might help you to understand and
follow the code examples exposed here.

[^libspng]: <https://libspng.org/>


First of all, remember to build and install this `libspng` into your system. Because
if don't do this step first, then, the `zig` compiler cannot find the files and resources of
this library in your computer, and link them with the Zig code that we are going to write here
together. There is good information about how to build and install the library at the
[build section of the library documentation at the official website](https://libspng.org/docs/build/)[^lib-build].

[^lib-build]: <https://libspng.org/docs/build/>


## How to call C code from Zig

We have discussed at @sec-building-c-code how to build C code using the `zig` compiler.
But we haven't discussed yet how to actually use C code in Zig. In other words,
we haven't discussed yet how to call C code from Zig, or, how to use C libraries in your Zig code,
etc.

Luckily enough, the small project that we are going to develop in this chapter will use and
call some C code. So now is the opportunity that we have to demonstrate this aspect of Zig.
So yes, you can use C code directly in Zig. Because of the very good interoperability between
Zig and C, it is possible to use and call code from any C library that you want in Zig.

This is not something new. Most high-level programming languages have FFI (foreign function interfaces),
which can be used to call C code. For example, Python have Cython, R have `.Call()`, Javascript have `ccall()`, etc.
But Zig integrates with C in a more direct way. You can call C functions directly in your Zig code without the need
to use a FFI.

Everything you have to do, is to import into your Zig code the C header file that describes the C functions
that you are going to use, pretty much like you would do in C, by including the header files into your C module.
After you import the header file, you can start calling and using the C functions described in this C header file
in your Zig code.
But remember, whenever you use a C library in your Zig code, you have to link your Zig code with this
C library in your build process. To do that, you use the techniques that we have already
discussed across the @sec-build-system.


### Importing C header files

To import C header files into our Zig code, we use the built-in functions `@cInclude()` and `@cImport()`.
Inside the `@cImport()` function, we open a block (with a pair of curly braces). Inside this block
we can include `@cDefine()` calls to define C macros when including this specific C header.
But we can also include a single `@cInclude()` call inside `@cImport()`.

You provide the name of the C header that you want to include as input to `@cInclude()`.
Take the example below, where we are importing the Standard IO C Library (`stdio.h`),
and calling the `printf()` C function. Notice that we have also used the C function `powf()`,
which comes from the C Math Library (`math.h`).
In order to compile this example, you have to link this Zig code with both
the C Standard Library and the C Math Library, by passing the flags `-lc` and `-lm`
to the `zig` compiler.

```{zig}
#| eval: false
const cmath = @cImport({
    @cInclude("math.h");
});
const stdio = @cImport({
    @cDefine("_NO_CRT_STDIO_INLINE", "1");
    @cInclude("stdio.h");
});

pub fn main() !void {
    const x: f32 = 15.2;
    const y = cmath.powf(x, @as(f32, 2.6));
    _ = stdio.printf("%.3f\n", y);
}
```

```
1182.478
```


### About passing inputs to C functions



