---
engine: knitr
knitr: true
syntax-definition: "../Assets/zig.xml"
---

```{r}
#| include: false
source("../zig_engine.R")
knitr::opts_chunk$set(
    auto_main = FALSE,
    build_type = "lib"
)
```


# Project 4 - Developing an image filter

In this chapter we are going to build a new small project. The objective of
this project is to build a program in Zig that applies a filter over an image.
More specifically, a "grayscale filter". This filter essentially transforms
any color image into a grayscale image.

We are going to use the image displayed at @fig-pascal as the example in this project.
In other words, we are going to transform this colored image, into a grayscale image,
using our "image filter program" written in Zig.

![A photo of the chilean-american actor Pedro Pascal. Source: Google Images.](../ZigExamples/image_filter/pedro_pascal.png){#fig-pascal}

We don't need to write a lot of code to build such "image filter program". However, in order for us
to build such program, we first need to understand how digital images work. That is why we begin this chapter
by explaining the theory behind digital images and how colors are represented in modern computers.
We also give a brief explanation about the file format PNG (Portable Network Graphics), which is used
in the example images.

At the end of this chapter, we will have a full example of a program that takes the PNG image displayed at @fig-pascal
as input, and writes a new image to the current working directory that is the grayscale version of the input image.
This grayscale version of @fig-pascal that is written by the program is exposed at @fig-pascal-gray.

![The grayscale version of the photo.](../ZigExamples/image_filter/pedro_pascal_filter.png){#fig-pascal-gray}


## How we see things? {#sec-eyes}

In this section, I want to briefly describe to you how we (humans) actually see things with our own eyes.
I mean, how our eyes work? If you do have a very basic understanding of how our eyes work, you will understand
more easily how digital images are made. Because the techniques used to produce a digital image
were developed by taking a lot of inspiration from how our human eyes work.

You can interpret a human eye as a light sensor, or, a light receptor. The eye receives some amount of light as input,
and it interprets the colors that are present in this "amount of light".
If no amount of light hits the eye, then, the eye cannot extract color from it, and as result,
we end up seeing nothing, or, more precisely, we see complete blackness.

So everything depends on light. What we actually see are the colors (blue, red, orange, green, purple, yellow, etc.) that
are being reflected from the light that is hitting our eyes. **Light is the source of all colors!**
This is what Isaac Newton discovered on his famous prism experiment[^newton] in the 1660s.

[^newton]: <https://library.si.edu/exhibition/color-in-a-new-light/science>

Inside our eyes, we have a specific type of cell called the "cone cell".
Our eye have three different types, or, three different versions of these "cone cells".
Each of these three types of cone cell is very sensitive to a specific spectrum of the light,
which are the spectrums that define the colors red, green and blue.
So, in summary, our eyes have specific types of cells that
are highly sensitive to these three colors (red, green and blue).

These are the cells responsible for perceiving the color present in the light that hits our eyes.
As a result, our eyes perceives color as a mixture of these three colors (red, green and blue). By having an amount
of each one of these three colors, and mixing them together, we can get any other visible color
that we want. So every color that we see is perceived as a specific mixture of blues, greens and reds,
like 30% of red, plus 20% of green, plus 50% of blue.

When these cone cells perceive (or, detect) the colors that are found in the
light that is hitting our eyes, these cells produce electrical signals and sent them to the brain.
Our brain interprets these electrical signals, and use them to form the image that we are seeing
inside our head.

Based on what we have discussed here, the items below describes the sequence of events that
composes this very simplified version of how our human eyes work:

1. Light hits our eyes.
1. The cone cells perceive the colors that are present in this light.
1. Cone cells produce electrical signals that describes the colors that were perceived in the light.
1. The electrical signals are sent to the brain.
1. Brain interprets these signals, and form the image based on the colors identified by these electrical signals.


## How digital images work? {#sec-digital-img}

A digital image is a "digital representation" of an image that we see with our eyes.
In other words, a digital image is a "digital representation" of the colors that we see
and perceive through the light.
In the digital world, we have two types of images, which are: vector image and raster image.
Vector images are not described here. So just remember that every single aspect that we discuss
here in this chapter about digital images **are related solely to raster images**, and not vector images.

Raster images are digital images that are represented as a 2D (two dimensional) matrix
of pixels. In other words, every raster image is basically a rectangle of pixels. Each pixel have a particular color.
So, the raster image is just a 2D matrix of pixels, and each of these pixels are displayed in the screen of your computer (or the screen
of any other device, e.g. laptop, tablet, smartphone, etc.) as colors.

For example, if the digital image have dimensions of 1920 pixels of width and 1080 pixels of height, then, the image
contains $1920 \times 1080 = 2073600$ pixels in total. You could also say that the "total area" of the image is
of 2073600 pixels, although the concept of "area" is not very used here in computer graphics.

Most digital images we see in the world uses the RGB color model. RGB stands for (red, green and blue) if you did not
detected that yet. So the color of each pixel in these raster images are usually
represented as a mixture of red, green and blue, just like in our eyes. That is, the color of each pixel is identified by a set of
three different integer values. Each integer value identifies the "amount" of each color (red, green or blue).
For example, the set `(199, 78, 70)` identifies a color that is close to red. We have 199 of red, 78 of green,
and 70 of blue (RGB). In contrast, the set `(129, 77, 250)` describes a color close to purple.



### Matrix of pixels

Ok, we know already that digital images are represented as a 2D matrix of pixels.
But we do not have a notion of a 2D matrix in Zig. Most low-level languages in general (Zig, C, Rust, etc.) do not have such notion.
As consequence, when programmers need to create a 2D matrix in low-level languages, they usually a normal 1D array
to do so.
You just create an normal 1D array, and store all values from both dimensions into this 1D array.

When we use such strategy, indexing the values from a specific dimension becomes a little harder.
But with some basic math we can solve this problem. As an example, let's use a very small image of 4x3 pixels,
which have 12 pixels in total, that is represented by $3 \times 12 = 36$ integer values.
So, we need to create an array of 36 unsigned 8-bit integer (`u8`) values to store the entire 2D matrix of pixels
of this particular image.

The reason why unsigned 8-bit integer (`u8`) values are used to represent the amounts of each color,
instead of any other integer type, is because they take the minimum amount of space as possible, or,
the minimum amount of bits as possible. Which helps to reduces the binary size of the image, i.e. of the 2D matrix.
Also, they convey a good amount of precision and detail about the colors, even though they can represent
a relatively small range (from 0 to 255) of "color amounts".

Now, suppose that we have this 1D array that represents a 2D matrix of 4x3 pixels, like the `matrix` object below.
How can we access the pixel at the 2nd row, and 3rd column of the matrix?
We just calculate the 1D index of this particular pixel by multiplying the number of the row
by the width of the matrix (e.g. the width of the image), and adds the number of the column to it.

```{zig}
#| auto_main: true
const std = @import("std");
const stdout = std.io.getStdOut().writer();
fn p(r: u8, g: u8, b: u8) Pixel {
    return Pixel{
        .red = r,
        .green = g,
        .blue = b,
    };
}
const Pixel = struct {
    red: u8,
    green: u8,
    blue: u8,
};

pub fn main() !void {
    const matrix = [_]Pixel{
        p(201, 10, 25),  p(185, 65, 70),
        p(65, 120, 110), p(65, 120, 117),
        p(98, 95, 12),   p(213, 26, 88),
        p(143, 112, 65), p(97, 99, 205),
        p(234, 105, 56), p(43, 44, 216),
        p(45, 59, 243),  p(211, 209, 54),
    };
    const row_num = 1;
    const col_num = 2;
    const index = (row_num * 4) + col_num;
    try stdout.print(
        "Pixel at 2nd row and 3rd column: {any}\n",
        .{ matrix[index] }
    );
}
```

```
Pixel at 2nd row and 3rd column: Pixel{
    .red = 143, .green = 112, .blue = 65
}
```

