{
  "hash": "fd67cfc92e05cd5c602d2fc964573098",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr: true\nsyntax-definition: \"../Assets/zig.xml\"\n---\n\n\n\n\n\n# Unit tests in Zig {#sec-unittests}\n\nIn this chapter, I want to dive in on how unit tests are developed in\nZig. We are going to talk about what is the testing wokflow in Zig, and\nalso, about the `test` command from the `zig` compiler.\n\n\n## Introducing the `test` scope\n\nIn Zig, unit tests are written inside a `test` scope.\nFirst, write the keyword `test`, then, you can optionally write a string with a label\nfor the group of unit tests that are being performed in this `test` scope.\nAfter that, just start writing your unit tests\ninside a pair of curly braces.\n\nIn the example below, we are testing if the sum of two objects (`a` and `b`)\nis equal to 4. The `expect()` function from the Zig Standard Library\nis a function that receives a logical test as input. If this logical test\nresults in `true`, then, the test passes. But if it results\nin `false`, then, the test fails.\n\nYou can write any Zig code you want inside of each `test` scope.\nPart of this code might be some necessary commands to setup your testing\nenvironment, or just initializing some necessary objects.\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst std = @import(\"std\");\nconst expect = std.testing.expect;\ntest \"testing simple sum\" {\n    const a: u8 = 2;\n    const b: u8 = 2;\n    try expect((a + b) == 4);\n}\n```\n:::\n\n\nYou can have multiple `test` scopes written on the same Zig module.\nAlso, you can mix `test` scopes with your source code, with no problems\nor consequences. If you mix `test` scopes with your normal source code,\nwhen you execute the `build`, `build-exe`, `build-obj` or `build-lib` commands from the\n`zig` compiler, these `test` scopes are automatically ignored by the\ncompiler.\n\nIn other words, the `zig` compiler only builds and execute your tests\nwhen you ask it to. By default, the compiler always ignore `test`\nscopes written in your Zig modules. The compiler normally only checks if\nthere are any syntax errors in these `test` scopes.\n\nIf you look at the source code for most of the files present in the\nZig Standard Library[^zig-std-lib], you can see that the `test` scopes\nare written together with the normal source code of the library.\nYou can see this for example, at the [`array_list` module](https://github.com/ziglang/zig/blob/master/lib/std/array_list.zig)[^zig-array].\n\n\nEach programmer might have a different opinion on this.\nSome of them might prefer, to keep unit tests separate from the actual\nsource code of their application. If that is your case, you can\nsimply create a separate `tests` folder in your project, and\nstart writing Zig modules that contains only unit tests (as would normally do on a Python project with `pytest`, for example),\nand everything will work fine.\nIt boils down to which is your preference here.\n\n[^zig-std-lib]: <https://github.com/ziglang/zig/tree/master/lib/std>\n[^zig-array]: <https://github.com/ziglang/zig/blob/master/lib/std/array_list.zig>\n\n\n## How to run your tests\n\nIf the `zig` compiler ignores any `test` scope by default, how can\nyou compile and run your unit tests? The answer is the `test` command from\nthe `zig` compiler. By running `zig test` command, the compiler will\nfind every instance of `test` scope in your Zig module, and, it will\ncompile and run the unit tests you wrote.\n\n\n```bash\nzig test simple_sum.zig\n```\n\n```\n1/1 simple_sum.test.testing simple sum... OK\nAll 1 tests passed.\n```\n\n\n## Testing memory allocations\n\nOne of the advantages of Zig is that it offers great tools\nthat hep us, programmers, to avoid (but also detect) memory problems, such as\nmemory leaks and double-frees. The `defer` keyword\nis specially helpful in this regard.\n\nWhen developing your\nsource code, you, the programmer, is responsible for making\nsure that your code do not produce such problems. However,\nyou can also use a special type of allocator object in Zig,\nthat is capable of automatically detect such problems for you.\nThis is the `std.testing.allocator` object.\nThis allocator object offers some basic memory safety detection\nfeatures, which are capable of detecting memory leaks.\n\nAs we described at @sec-heap, to allocate memory on the heap, you need\nto use an allocator object, and your functions that use these objects to allocate memory\non the heap, should receive an allocator object as one of it's inputs.\nEvery memory on the heap that you allocate using these allocator objects,\nmust also be freed using this same allocator object.\n\nSo, if you want to test the memory allocations performed by your functions,\nand make sure that you don't have problems in these allocations, you can simply\nwrite unit tests for these functions, where you provide the\n`std.testing.allocator` object as input to these functions.\n\nLook at the example below, where I'm defining a function that clearly causes\na memory leak. Because we allocate memory with the allocator object,\nbut we do not free this allocated memory in any point. So, when the function\nreturns, we lose the reference to the `buffer` object, which contains\nthe allocated memory, and, as a result, we can no longer free this memory.\n\nNotice that, inside a `test` scope I execute this function with\nthe `std.testing.allocator`. Since no visible errors were raised inside\nthe `test` scope, the `zig` compiler completes the process indicating that\nthe unit tests performed inside the `test` scope labeled as `\"memory leak`\nhave all passed. But despite this result, the allocator object was capable\nof looking deeper in our program, and detecting the memory leak. As a result,\nthis allocator object returns a message \"tests leaked memory\", and also,\na stack trace showing the exact point where the memory was leaked.\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst std = @import(\"std\");\nconst Allocator = std.mem.Allocator;\nfn some_memory_leak(allocator: Allocator) !void {\n    const buffer = try allocator.alloc(u32, 10);\n    _ = buffer;\n    // Return without freeing the\n    // allocated memory\n}\n\ntest \"memory leak\" {\n    const allocator = std.testing.allocator;\n    try some_memory_leak(allocator);\n}\n```\n:::\n\n\n```\nTest [1/1] leak_memory.test.memory leak...\n    [gpa] (err): memory address 0x7c1fddf39000 leaked: \n./ZigExamples/debugging/leak_memory.zig:4:39: 0x10395f2\n    const buffer = try allocator.alloc(u32, 10);\n                                      ^\n./ZigExamples/debugging/leak_memory.zig:12:25: 0x10398ea\n    try some_memory_leak(allocator);\n\n... more stack trace\n```\n\n\n## Testing errors\n\nOne commom style of unit tests are those that look for\nspecific errors in your functions. In other words, you write\na unit test that tries to assert if a specific function call\nreturns any error, or a specific type of error.\n\nIn C++ you would normally write this stye of unit test using, for example,\nthe functions `REQUIRE_THROWS()` or `CHECK_THROWS()` from the [`Catch2` test framework](https://github.com/catchorg/Catch2/tree/devel)[^catch2].\nIn the case of a Python project, you would use the\n[`raises()` function from `pytest`](https://docs.pytest.org/en/7.1.x/reference/reference.html#pytest-raises)[^pytest].\nWhile in Rust, you would probably use `assert_eq!()` in conjunction with `Err()`.\n\n[^pytest]: <https://docs.pytest.org/en/7.1.x/reference/reference.html#pytest-raises>\n[^catch2]: <https://github.com/catchorg/Catch2/tree/devel>\n\n\nBut in Zig, we use the `expectError()` function, from the `std.testing` module.\nWith this function, you can test if a specific function call returns the exact\ntype of error that you expect it to return. To use this function, you first write\n`try expectError()`. Then, on the first argument, you provide the type of error that you\nare expecting from the function call. Then, on the second argument, you write\nthe function call you expect to fail.\n\nThe code example below demonstrates such type of unit test in Zig.\nNotice that, inside the function `alloc_error()` we are allocating\n100 bytes of memory, or, an array of 100 elements, for the object `ibuffer`. However,\nin the `test` scope, we are using the `FixedBufferAllocator()`\nallocator object, which is limited to 10 bytes of space, because\nthe object `buffer`, which we provided to the allocator object,\nhave only 10 bytes of space.\n\nThat is why, the `alloc_error()` function raises an `OutOfMemory` error\non this case.\nBecause this function is trying to allocate more space than the allocator\nobject allows.\nSo, in essence, we are testing for a specific type of error,\nwhich is `OutOfMemory`. If the `alloc_error()` function returns any other type of error,\nthen, the `expectError()` function would make the entire test fail.\n\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst std = @import(\"std\");\nconst Allocator = std.mem.Allocator;\nconst expectError = std.testing.expectError;\nfn alloc_error(allocator: Allocator) !void {\n    var ibuffer = try allocator.alloc(u8, 100);\n    defer allocator.free(ibuffer);\n    ibuffer[0] = 2;\n}\n\ntest \"testing error\" {\n    var buffer: [10]u8 = undefined;\n    var fba = std.heap.FixedBufferAllocator.init(&buffer);\n    const allocator = fba.allocator();\n    try expectError(error.OutOfMemory, alloc_error(allocator));\n}\n```\n:::\n\n\n```\n1/1 oom.test.testing error... OK\nAll 1 tests passed.\n```\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}