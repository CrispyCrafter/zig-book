{
  "hash": "eaa53c6aa71c6d450539addc4ea23c92",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr: true\nsyntax-definition: \"../Assets/zig.xml\"\n---\n\n\n\n\n\n# Building a base64 encoder/decoder\n\nAs our first small project, I want to implement with you a base64 encoder/decoder in Zig.\nBase64 is an encoding system which translates binary data to text.\nA big chunk of the web uses base64 to deliver binary data to systems\nthat can only read text data.\n\nThe biggest example of a modern use case for base64 is essentially any email system,\nlike GMail, Outlook, etc. Because email systems normally use\nthe Simple Mail Transfer Protocol (SMTP), which is a web protocol\nthat supports only text data. So, if you need, for any reason, to\nsend a binary file (like for example, a PDF, or an Excel file) as\nan attachment in your email, these binary files are normally\nconverted to base64, before they are included in the SMTP message.\nSo, the base64 encoding is largelly used in these email systems to include\nbinary data into the SMTP message.\n\n\n\n\n\n\n## How the base64 algorithm work? \n\nNow, how exactly the algorithm behind the base64 encoding works? Let's discuss that. First, I will\nexplain the base64 scale, which is the scale of 64 characters that represents the base64 encoding system.\n\nAfter that, I explain the algorithm behind a base64 encoder, which is the part of the algorithm that is responsible for encoding messages\ninto the base64 encoding system. Then, after that, I explain the algorithm behind a base64 decoder, which is\nthe part of the algorithm that is responsible for translating base64 messages back into their original meaning.\n\nIf you are unsure about the differences between an \"encoder\" and a \"decoder\",\ntake a look at @sec-encode-vs-decode.\n\n\n### The base64 scale\n\nIn essence, the base64 encoding system is based on a scale that goes from 0 to 64 (hence the name).\nEach index in this scale is represented by a character (it is a scale of 64 characters).\nSo, in order to convert some binary data, to the base64 encoding, we need to convert each binary number to the corresponding\ncharacter in this \"scale of 64 characters\".\n\nThe base64 scale starts with all ASCII uppercase letters (A to Z) which represents\nthe first 25 indexes in this scale (0 to 25). After that, we have all ASCII lowercase letters\n(a to z), which represents the range 26 to 51 in the scale. After that, we\nhave the one digit numbers (0 to 9), which represents the indexes from 52 to 61 in the scale.\nFinally, the last two indexes in the scale (62 and 63) are represented by the characters `+` and `/`,\nrespectively.\n\nThese are the 64 characters that compose the base64 scale. The equal sign character (`=`) is not part of the scale itself,\nbut it is a special character in the base64 encoding system. This character is used solely as a suffix, to mark the end of the character sequence,\nor, to mark the end of meaningful characters in the sequence.\n\nThe bulletpoints below summarises the base64 scale:\n\n- range 0 to 25 is represented by: ASCII uppercase letters `-> [A-Z]`;\n- range 26 to 51 is represented by: ASCII lowercase letters `-> [a-z]`;\n- range 52 to 61 is represented by: one digit numbers `-> [0-9]`;\n- index 62 and 63 are represented by the characters `+` and `/`, respectively;\n- the character `=` represents the end of meaningful characters in the sequence;\n\n\n\nEverytime that the base64 algorithm needs to fill some gap (which always occur at the end of\nthe input string) with a group of 6 bits filled with only zeros (`000000`), this group is automatically\nmapped to the character `=`. Because this group of 6 bits is meaningless, they represent nothing,\nthey are just filling the gap. As a result, the base64 algorithm maps this meaningless group\nto the character `=`, which represents the end of meaningful characters in the sequence.\nThis characteristic is explained in more details at @sec-base64-encoder-algo.\n\n\n\n### Creating the scale as a lookup table {#sec-base64-table}\n\nThe best way to represent this scale in code, is to represent it as a *lookup table*.\nLookup tables are a classic strategy in computer science to speed calculations. The basic idea\nis to replace a runtime calculation (which can take a long time to be done) by a basic array indexing\noperation.\n\nInstead of calculating the results everytime you need them, you calculate all possible results at once, and then, you store them in an array\n(which behaves lake a \"table\"). Then, every time that you need to use one of the characters in the base64 scale, instead of\nusing many resources to calculate the exact character to be used, you simply retrieve this character\nfrom the array where you stored all the possible characters in the base64 scale. So we retrieve the character that we need\ndirectly from memory.\n\nWe can start building a Zig struct to store our base64 decoder/encoder logic.\nWe start with the `Base64` struct below. You can see that, for now, we only have an `init()` function,\nto create a new instance of a `Base64` object, and, a `_char_at()` function, which is a\n\"get chat at index ...\" type of function.\n\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst Base64 = struct {\n    _table: *const [64]u8,\n\n    pub fn init() Base64 {\n        const upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const lower = \"abcdefghijklmnopqrstuvwxyz\";\n        const numbers_symb = \"0123456789+/\";\n        return Base64{\n            ._table = upper ++ lower ++ numbers_symb,\n        };\n    }\n\n    pub fn _char_at(self: Base64, index: u8) u8 {\n        return self._table[index];\n    }\n};\n```\n:::\n\n\n\nIn other words, the `_char_at()` function is responsible for getting the character in the lookup table (i.e. the `_table` variable) that\ncorresponds to a particular index in the \"base64 scale\". So, in the example below, we know that\nthe character that corresponds to the index 28 in the \"base64 scale\" is the character \"c\".\n\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst base64 = Base64.init();\ntry stdout.print(\n    \"Character at 28 index: {c}\\n\",\n    .{base64._char_at(28)}\n);\n```\n:::\n\n\n```\nCharacter at 28 index: c\n```\n\n\n\n### A base64 encoder {#sec-base64-encoder-algo}\n\nThe algorithm behind a base64 encoder usually works on a window of 3 bytes. Because each byte have\n8 bits, so, 3 bytes forms a set of $8 \\times 3 = 24$ bits. This is desirable for the base64 algorithm, because\n24 bits is divisble by 6, which form a set of 4 groups of 6 bits each.\n\nSo the base64 algorithm work by converting 3 bytes at a time\ninto 4 characters in the base64 scale. It keeps iterating through the input string,\n3 bytes at a time, and converting them into the base64 scale, producing 4 characters\nper iteration. It keeps iterating, and producing these \"new characters\"\nuntil it hits the end of the input string.\n\nNow you may think, what if you have a particular string that have a number of bytes\nthat is not divisible by 3? What happens? For example, if you have a string\nthat contains only two characters/bytes, such as \"Hi\". How the\nalgorithm behaves in such situation? You find the answer at @fig-base64-algo1.\nYou can see at @fig-base64-algo1 that the string \"Hi\", when converted to base64,\nbecomes the string \"SGk=\":\n\n![The logic behind a base64 encoder](./../Figures/base64-encoder-flow.png){#fig-base64-algo1}\n\nIn the example of the string \"Hi\" we have 2 bytes, or, 16 bits in total. So, we lack a full byte (8 bits)\nto complete the window of 24 bits that the base64 algorithm likes to work on. In essence,\neverytime that the algorithm does not meet this requirement, it simply add extra zeros\nuntil it fills the space that it needs.\n\nThat is why at @fig-base64-algo1, on the third group after the 6-bit transformation,\n2 extra zeros were added to fill the gap in this group, and also, the fourth group (which is the last 6-bit group)\nis entirely made by zeros that were added by the algorithm.\n\nSo every time that the base64 algorithm can't produce a full group of 6 bits, it\nsimply fills the gap in this group with zeros, until it get's the 6 bits that it needs.\n\nIs worth mentioning that, everytime that the algorithm produces a group of 6 bits that\nis entirely composed by these extra zeros added by the algorithm, then, this group of 6 bits is automatically mapped to\nthe character `=` (equal sign). However, notice that a group of 6-bit entirely made by **extra zeros**,\nis different than a group of 6-bit entirely made by **zeros**.\n\nIn other words, if the algorithm produces a 6-bit group made by zeros, without\nneeding to include extra-zeros to fill any gap, then, this \"group of zeros\" is interpreted as is. In binary,\nthe 6-bit group `000000` simply means zero. So, if we give the index zero to the function `_char_at()`,\nthis zero index is mapped to the first character in the base64 scale, which is \"A\".\n\nSo be aware of this important distinction. A group of \"extra-zeros\" that are \"filling the gap\"\nis different than a group of actual zeros that were calculated by the 6-bit transformation.\nAs an example, if you give the string \"0\" as input to a base64 encoder, this string is\ntranslated into the base64 sequence \"MA==\".\n\nThe character \"0\" is, in binary, the sequence `00110000`[^zero-note]. So, with the 6-bit transformation\nexposed at @fig-base64-algo1, this single character would produce these two 6-bit groups: `001100`, `000000`.\nThe other two 6-bit groups are entirely made by extra-zeros, and that is why the last\ntwo characters in the output sequence (MA==) are `==`.\n\n\n[^zero-note]: Notice that, the character \"0\" is different than the actual number 0, which is simply zero in binary.\n\n### A base64 decoder {#sec-base64-decoder-algo}\n\nThe algorithm behind a base64 decoder is essentially the inverse process of a base64 encoder.\nA base64 decoder needs to be able to translate base64 messages back into their original meaning,\ni.e. into the original sequence of binary data.\n\nA base64 decoder usually works on a window of 4 bytes. Because it wants to convert these 4 bytes\nback into the original sequence of 3 bytes, that was converted into 4 groups of 6 bits by the\nbase64 encoder. Remember, in a base64 decoder we are essentially reverting the process made\nby the base64 encoder.\n\nEach byte in the input string (the base64 encoded string) normally contributes to re-create two different bytes in the output (the original binary data).\nIn other words, each byte that comes out of a base64 decoder is created by transforming merging two different\nbytes in the input together. You can see this fact at @fig-base64-algo2:\n\n![The logic behind a base64 decoder](./../Figures/base64-decoder-flow.png){#fig-base64-algo2}\n\nThe exact transformations, or, the exact steps applied to each byte from the input to transform them\ninto the bytes in the output, are a bit tricky to visualize in a figure like this. Because of that, I\nsummarized these transformations as \"Some bit shifting and additions ...\". These transformations\nwill be described in depth later.\n\nBesides that, if you look again at @fig-base64-algo2, you will notice that the character `=` was completly\nignored in the algorithm. Remember, this is just a special character that marks the end of meaninful characters\nin the base64 sequence. So, every `=` character in a base64 encoded sequence should be ignored.\n\n\n## Difference between encode and decode {#sec-encode-vs-decode}\n\nIf you don't have any previous experience with base64, you might be confused about\nwhat is the differente between \"encode\" and \"decode\". Essentially, the terms \"encode\" and \"decode\" here\nhave the exact same meaning as they have in the field of encryption (i.e. they mean the same thing as \"encode\" and \"decode\" in hashing\nalgorithms, like the MD5 algorithm).\n\nSo, \"encode\" means that we want to encode, or, in other words, we want to translate some message into\nthe base64 encoding system. We want to produce the sequence of base64 characters that represent this\noriginal message in the base64 encoding system.\n\nIn contrast, \"decode\" represents the inverse process.\nWe want to decode, or, in other words, translate a base64 message back to it's original content.\nSo, in this process we get a sequence of base64 characters as input, and produce as output,\nthe binary data that is represented by this sequence of base64 characters.\n\nSo, any base64 library is normally composed by these two parts: 1) the encoder, which is a function that encodes\n(i.e. it converts) any sequence of binary data into a sequence of base64 characters; 2) the decoder, which is a function\nthat converts a sequence of base64 characters back into the original sequence of binary data.\n\n\n\n## Calculating the size of the output {#sec-base64-length-out}\n\nOne task that we need to do is to calculate how much space we need to reserve for the\noutput, both of the encoder and decoder. This is simple math, and can be done easily in Zig\nbecause every array have it's length (it's number of bytes) easily accesible by consulting\nthe `.len` property of the array.\n\nFor the encoder, the logic is the following: for each 3 bytes that we find in the input,\n4 new bytes are created in the output. So, we take the number of bytes in the input, divide it\nby 3, use a ceiling function, then, we multiply the result by 4. That way, we get the total\nnumber of bytes that will be produced by the encoder in it's output.\n\nThe `_calc_encode_length()` function below encapsulates this logic. Notice that we convert\nthe `.len` property of the array, which is always a integer (more precisely, an `usize` value),\ninto a floating point number of 64 bits (`f64`). We do this, because the ceiling function (`@ceil()`) works\nonly with floating point numbers. So, we convert it so that the division with the number `3.0` results in\na floating point number. Then, after the ceiling process, we can convert the result back into an\ninteger value (with the `@intFromFloat()` function).\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nfn _calc_encode_length(input: []const u8) u64 {\n    if (input.len < 3) {\n        const n_output: u64 = 4;\n        return n_output;\n    }\n    const len_as_float: f64 = @floatFromInt(input.len);\n    const n_output: u64 = @intFromFloat(@ceil(len_as_float / 3.0) * 4.0);\n    return n_output;\n}\n```\n:::\n\n\nIs important to notice that, when I am using the built-in functions from Zig to convert data types (`@floatFromInt()` and `intFromFloat()`),\nI'm always annotating explicitly the type of the variable that stores the result of these functions.\nI do that, because these functions need this information. `@floatFromInt()` needs to know\nwhich type of floating point number I want to use in it's output. Is it `f16`? `f32`? `f64`? etc.\nThe same goes to `@intFromFloat()`.\n\nAlso, you might have notice that, if the input length is less than 3 bytes, then, the output length of the encoder will\nbe always 4 bytes. This is because the algorithm will always fill the gap in the input with zeroes, until it fits\nthe window of 24 bits that the algorithm likes to work on, as I described at @sec-base64-encoder-algo. So the output\nof the algorithm will always be 4 bytes in this specific case.\n\n\nNow, for the decoder, we just need to apply the inverse logic: for each 4 bytes in the input, 3 bytes\nwill be produced in the output of the decoder. I mean, this is roughly true, because we also need to\ntake the `=` character into account, which is always ignored by the decoder, as we described at @sec-base64-decoder-algo, and,\nat @fig-base64-algo2. But we can ignore this fact for now, to make things simpler.\n\nSo, the function `_calc_decode_length()` summarizes this logic that we described. It is very similar\nto the function `_calc_encode_length()`, only the division part is twisted, and also, in the special\ncase where we have less than 4 bytes in the input to work on.\n\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nfn _calc_decode_length(input: []const u8) u64 {\n    if (input.len < 4) {\n        const n_output: u64 = 3;\n        return n_output;\n    }\n    const len_as_float: f64 = @floatFromInt(input.len);\n    const n_output: u64 = @intFromFloat(@floor(len_as_float / 4.0) * 3.0);\n    return n_output;\n}\n```\n:::\n\n\n\n## Building the encoder logic\n\nIn this section, we can start building the logic behind the `encode()` function, which\nwill be responsible for encoding messages into the base64 encoding system.\n\n\n\n### The 6-bit transformation\n\nThe 6-bit transformation presented at @fig-base64-algo1 is the core part of the base64 encoder algorithm.\nBy understanding how this transformation is made in code, the rest of the algorithm becomes much simpler\nto comprehend.\n\nIn essence, this 6-bit transformation is made with the help of bitwise operators.\nBitwise operators are essential to any type of low-level operation that is done at the bit-level. For the specific case of the base64 algorithm,\nthe operators *bif shift to the left* (`<<`), *bit shift to the right* (`>>`), and the *bitwise and* (`&`) are used. They\nare the core solution for the 6-bit transformation.\n\nWe have 3 different scenarios that we need to account for in this transformation. First, is the perfect scenario,\nwhere we have the perfect window of 3 bytes to work on. Second, we have the scenario where we have a window of only\ntwo bytes to work with. And last, we have the scenario where we have a window of one single byte.\n\nIn each of these 3 scenarios, the 6-bit transformation works a bit different. To make the explanation\neasier, I will use the variable `output` to refer to the bytes in the output of the base64 encoder,\nand the variable `input` to refer to the bytes in the input of the encoder.\n\n\nIf you have the perfect window of 3 bytes, these are steps for the 6-bit transformation:\n\n1. `output[0]` is produced by moving the bits from `input[0]` two positions to the right.\n1. `output[1]` is produced by summing two components. First, take the last two bits from `input[0]`, then, move them four positions to the left. Second, move the bits from `input[1]` four positions to the right. Sum these two components.\n1. `output[2]` is produced by summing two components. First, take the last four buts from `input[1]`, then, move them two positions to the left. Second, move the buts from `input[2]` six positions to the right.\n1. `output[3]` is produced by taking the last six bits from `input[2]`.\n\n\nIf you have a window of 2 bytes, then, the steps 3 and 4, which produces the bytes `output[2]` and `output[3]`, change a little bit,\nand they become:\n\n- `output[2]` is produced by taking the last 4 bits from `input[1]`, then, move them two positions to the left.\n- `output[3]` is the character `'='`.\n\n\nAt last, if you have a window of a single byte, then, the steps 2 to 4, which produces the bytes `output[1]`, `output[2]` and `output[3]` change,\nbecoming:\n\n- `output[1]` is produced by taking the last two bits from `input[0]`, then, move them four positions to the left.\n- `output[2]` and `output[3]` are the character `=`.\n\n\nIf these bulletpoints were a bit confusing for you, you may find the @tbl-transf-6bit more intuitive.\nThis table unifies all this logic into a simple table. Notice that\nthis table also provides the exact expression in Zig that creates the corresponding\nbyte in the output.\n\n\n::: {#tbl-transf-6bit}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"uptoicckyu\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n  \n  <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\" style=\"-webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3;\" bgcolor=\"#FFFFFF\">\n  <thead style=\"border-style: none;\">\n    <tr class=\"gt_col_headings\" style=\"border-style: none; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Number of bytes in the window&lt;/strong&gt;\" style=\"border-style: none; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; text-align: left;\" bgcolor=\"#FFFFFF\" valign=\"bottom\" align=\"left\"><strong>Number of bytes in the window</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Byte index in the output&lt;/strong&gt;\" style=\"border-style: none; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; text-align: left;\" bgcolor=\"#FFFFFF\" valign=\"bottom\" align=\"left\"><strong>Byte index in the output</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;In code&lt;/strong&gt;\" style=\"border-style: none; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; text-align: left;\" bgcolor=\"#FFFFFF\" valign=\"bottom\" align=\"left\"><strong>In code</strong></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\" style=\"border-style: none; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3;\">\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">0</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`input[0] >> 2`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>input[0] &gt;&gt; 2</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`((input[0] & 0x03) << 4) +`\n\n`(input[1] >> 4)`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0;\"><code>((input[0] &amp; 0x03) &lt;&lt; 4) +</code></p>\n<p style=\"margin: 0; padding: 0; margin-bottom: 0;\"><code>(input[1] &gt;&gt; 4)</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`((input[1] & 0x0f) << 2) +`\n\n`(input[2] >> 6)`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0;\"><code>((input[1] &amp; 0x0f) &lt;&lt; 2) +</code></p>\n<p style=\"margin: 0; padding: 0; margin-bottom: 0;\"><code>(input[2] &gt;&gt; 6)</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`input[2] & 0x3f`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>input[2] &amp; 0x3f</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">0</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`input[0] >> 2`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>input[0] &gt;&gt; 2</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`((input[0] & 0x03) << 4) +`\n\n`(input[1] >> 4)`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0;\"><code>((input[0] &amp; 0x03) &lt;&lt; 4) +</code></p>\n<p style=\"margin: 0; padding: 0; margin-bottom: 0;\"><code>(input[1] &gt;&gt; 4)</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`((input[1] & 0x0f) << 2)`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>((input[1] &amp; 0x0f) &lt;&lt; 2)</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`'='`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>'='</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">0</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`input[0] >> 2`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>input[0] &gt;&gt; 2</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`((input[0] & 0x03) << 4)`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>((input[0] &amp; 0x03) &lt;&lt; 4)</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">2</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`'='`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>'='</code></p>\n</div></div></td></tr>\n    <tr style=\"border-style: none;\"><td headers=\"Number of bytes in the window\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">1</td>\n<td headers=\"Byte index in the output\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\">3</td>\n<td headers=\"In code\" class=\"gt_row gt_left\" style=\"border-style: none; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; text-align: left;\" valign=\"middle\" align=\"left\"><div data-qmd=\"`'='`\"><div class=\"gt_from_md\"><p style=\"margin: 0; padding: 0; margin-top: 0; margin-bottom: 0;\"><code>'='</code></p>\n</div></div></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\nHow the 6-bit transformation translates into code in different window settings.\n\n:::\n\n\n### Quick & dirty approach\n\nTo get a better understanding of what we need to do, let's implement just the bare minimum of code\nto convert some input into the base64 encoding system. This will be a \"quick and dirty\" approach.\nIt doesn't need to be preety or good quality code. It just needs to work.\n\n#### First byte in the output\n\nLet's begin by building the first byte in the output of the encoder. This is the easiest byte of the 4 bytes in the output\nto build. We only need to move the bits from the first byte in the input (`01001000`) two positions to the right,\nwith the *bit shift to the right* (`>>`) operator.\n\nBy moving the bits two places to the right, we get the sequence `00010010` as output. As a result, the first 6 bits\nof the first byte in the input were moved to the end of the byte.\nWith this operation, we get the first byte of the ouput, which corresponds to the index in the base64 scale for the first character\nin the base64 scale.\n\n\n\n\n::: {.cell auto_main='true'}\n\n```{.zig .cell-code}\nconst input = \"Hi\";\nvar output = [4]u8{0,0,0,0};\noutput[0] = input[0] >> 2;\n```\n:::\n\n\n#### Second byte in the output\n\nThe second byte in the output is produced by summing two components together. On the first component,\nwe need to select the last two bits in the first byte of the input. We do that, by using the \"bitwise and\" (`&`)\noperator and the hexadecimal value `0x03`, which is, in binary, the sequence `00000011`. Notice\nthat only the last two bits in `0x03` are \"on\" (i.e. setted to one).\n\nWith this `&` operator and the `0x03` value, we essentially set all bits that we do not care about (in this case,\nthe first 6 bits) to zero. By setting them to zero, we essentially remove these bits from the equation.\nOnly the last two bits of the byte maintain their original values.\nAfter this operation, we just move the resulting bits four positions to the left.\n\nTo produce the second component, we simply take second byte in the input, and then, we move it's bits\nfour positions to the right. At last, we just sum these two components together to form the second byte in the output.\n\n\n::: {.cell auto_main='true'}\n\n```{.zig .cell-code}\nconst component1 = ((input[0] & 0x03) << 4)\nconst component2 = (input[1] >> 4)\noutput[1] = component1 + component2;\n```\n:::\n\n\n\n#### Third byte in the output\n\nThe third byte in the output is also produced by summing two components together.\nIn the first component, we need to take the last 4 bits in the second byte in the input. Then, we move\nthese bits two positions to the left. In the second component, we take the third byte in the input,\nand move it's bits six positions to the right.\n\n\n\n::: {.cell auto_main='true'}\n\n```{.zig .cell-code}\nconst component1 = ((input[1] & 0x0f) << 2);\nconst component2 = (input[2] >> 6);\noutput[2] = component1 + component2;\n```\n:::\n\n\n\n#### Fourth byte in the output\n\nThe fourth byte in the output is produced by taking the third byte in the input,\nand selecting the last six bits, with the `&` operator and the hexadecimal\nvalue `0x3f`.\n\n\n::: {.cell auto_main='true'}\n\n```{.zig .cell-code}\noutput[3] = input[2] & 0x3f;\n```\n:::\n\n\n#### The end result\n\nWith this dirty code, we get the end result, which is the string `SGk=`.\nWe can print this string at the end of the program to see this end result:\n\n\n::: {.cell auto_main='true'}\n\n```{.zig .cell-code}\nstd.debug.print(\"Result: {s}\\n\", .{output});\n```\n:::\n\n\n```\nResult: SGk=\n```\n\n\n\n### Encapsulating this logic into a function\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nfn encode(self: Base64,\n          input: []const u8,\n          allocator: std.mem.Allocator) ![]u8 {\n\n    if (input.len == 0) {\n        return \"\";\n    }\n\n    const n_out = _calc_encode_length(input);\n    var out = try allocator.alloc(u8, n_out);\n    var buf = [3]u8{ 0, 0, 0 };\n    var count: u8 = 0;\n    var iout: u64 = 0;\n\n    for (input, 0..) |_, i| {\n        buf[count] = input[i];\n        count += 1;\n        if (count == 3) {\n            out[iout] = self._char_at(buf[0] >> 2);\n            out[iout + 1] = self._char_at(\n                ((buf[0] & 0x03) << 4) + (buf[1] >> 4)\n            );\n            out[iout + 2] = self._char_at(\n                ((buf[1] & 0x0f) << 2) + (buf[2] >> 6)\n            );\n            out[iout + 3] = self._char_at(buf[2] & 0x3f);\n            iout += 4;\n            count = 0;\n        }\n    }\n\n    if (count == 1) {\n        out[iout] = self._char_at(buf[0] >> 2);\n        out[iout + 1] = self._char_at(\n            (buf[0] & 0x03) << 4\n        );\n        out[iout + 2] = '=';\n        out[iout + 3] = '=';\n    }\n\n    if (count == 2) {\n        out[iout] = self._char_at(buf[0] >> 2);\n        out[iout + 1] = self._char_at(\n            ((buf[0] & 0x03) << 4) + (buf[1] >> 4)\n        );\n        out[iout + 2] = self._char_at(\n            (buf[1] & 0x0f) << 2\n        );\n        out[iout + 3] = '=';\n        iout += 4;\n    }\n\n    return out;\n}\n```\n:::\n",
    "supporting": [
      "01-base64_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}