{
  "hash": "f0e32173c4a0a908d54c43f5e45a1f77",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr: true\nsyntax-definition: \"../Assets/zig.xml\"\n---\n\n\n\n\n# Memory and Allocators in Zig\n\n## Introduction\n\nIn this chapter, we will talk about memory. How does Zig controls memory? What\ncommom tools are used? Are there any important aspect that makes memory\ndifferent/special in Zig? You will find the answers here.\n\nEvery computer needs memory. Is by having memory that computers can temporarily store\nthe values/results of your calculations. Without memory, programming languages would never have\nconcepts such as \"variables\", or \"objects\", to store the values that you generate.\n\n\n## Memory spaces\n\nEvery variable that you create in your Zig source code needs to be stored somewhere,\nin your computer's memory. Depending on where and how you define your variable, Zig\nwill use a different \"memory space\", or a different\ntype of memory to store this variable.\n\nEach type of memory normally serves for different purposes.\nIn Zig, there are 3 types of memory (or 3 different memory spaces) that we care about. They are:\n\n- Global data register (or the \"global data section\");\n- Stack;\n- Heap;\n\n\n### Compile-time known versus runtime known\n\nOne strategy that Zig uses to decide where it will store each variable that you declare, is by looking\nat the value of this particular variable. More specifically, by investigating if this value is\nknown at \"compile-time\" or at \"runtime\".\n\nWhen you write a program in Zig, some values that you write in your program are *known\nat compile time*. Meaning that, when you compile your Zig source code, during the compilation process,\nthe `zig` compiler can figure it out what is the exact value of a particular variable (or object)\nthat exists in your source code.\n\nFor example, in the source code below, we have two constant variables (`name` and `array`) declared.\nBecause the values of these particular variables are written down, in the source code itself (`\"Pedro\"`\nand the number sequence from 1 to 4), the `zig` compiler can easily discover the values of these constant\nvariables (`name` and `array`) during the compilation process.\n\n\nThis is what \"known at compile time\" means. It refers to any variable that you have in your Zig source code\nwhose value can be identified at compile time.\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst name = \"Pedro\";\nconst array = [_]u8{1, 2, 3, 4};\n_ = name; _ = array;\n\nfn input_length(input: []const u8) usize {\n    return input.len;\n}\n```\n:::\n\n\nThe other side of the spectrum are variables whose values are not known at compile time.\nFunction arguments are a classic example of this. Because the value of each function\nargument depends on the value that you assign to this particular argument,\nwhen you call the function.\n\nFor example, the function `input_length()` contains an argument named `input`, which is an array of `u8` integers (`[]const u8`).\nIs impossible to know at compile time the value of this particular argument. We know that it will be an array of `u8` integers.\nBut we can't know which exact array of `u8` integers this argument will store, before we execute this function.\nIt is only *known at runtime*, which is the period of time when you program is executed.\n\nSo depending on which input your apply this `input_length()` function over, the `input` argument\nwill probably have a different value in each case.\nBecause of this intrinsic characteristic of any function, the value of the argument `input` is not \"compile-time known\".\nIt is known only at runtime.\n\n\n\n### Global data register\n\nThe global data register is a specific section of the executable of your Zig program, that is responsible\nfor storing any value that is known at compile time.\n\nEvery constant variable whose value is known at compile time that you declare in your source code,\nis stored in the global data register. Also, every literal value that you write in your source code,\nsuch as the string `\"this is a string\"`, or the integer `10`, or a boolean value such as `true`,\nis also stored in the global data register.\n\nHonestly, you don't need to care much about this memory space. Because you can't control it,\nyou can't deliberately access it or use it for your own purposes.\nAlso, this memory space does not affect the logic of your program.\nIt simply exists in your program.\n\n\n### Stack vs Heap\n\nIf you are familiar with system's programming, or just low-level programming in general, you\nprobably have heard of the \"duel\" between Stack vs Heap. These are two different types of memory,\nor different memory spaces, which are both available in Zig.\n\nThese two types of memory don't actually duel with\neach other. This is a commom mistake that beginners have, when seeing \"x vs y\" styles of\ntabloid headlines. These two types of memory are actually complementary to each other.\nSo, in almost every Zig program that you might ever write, you will likely use a combination of both.\nI will describe each memory space in detail over the next sections. But for now, I just want to\nstablish the main difference between these two types of memory.\n\nIn essence, the stack memory is normally used to store values whose length is fixed and known\nat compile time. In contrast, the heap memory is a much more *dinamic* type of memory space, meaning that, it is\nused to store values whose length might grow during the execution (runtime) of your program [@jenny2022].\nLengths that grow during runtime are intrinsically \"runtime known\" type of values.\nIn other words, if you have a variable whose length might grow during runtime, then, the length\nof this variable becomes not known at compile time. These types of variables are usually stored\nin the heap memory space.\n\n\n\n### Stack\n\nThe stack is a type of memory that uses the power of the *stack data structure*, hence the name. \nA \"stack\" is a type of *data structure* that uses a \"last in, first out\" (LIFO) mechanism to store the values\nyou give it to. I imagine you are familiar with this data structure.\nBut, if you are not, the [Wikipedia page](https://en.wikipedia.org/wiki/Stack_(abstract_data_type))[^wiki-stack]\n, or, the [Geeks For Geeks page](https://www.geeksforgeeks.org/stack-data-structure/)[^geek-stack] are both\nexcellent and easy resources to fully understand how this data structure works.\n\n[^wiki-stack]: <https://en.wikipedia.org/wiki/Stack_(abstract_data_type)>\n[^geek-stack]: <https://www.geeksforgeeks.org/stack-data-structure/>\n\nSo, the stack memory space is a type of memory that stores values using a stack data structure.\nIt adds and removes values from the memory by following a \"last in, first out\" (LIFO) principle.\n\nIn general, every function call that you make in Zig will always allocate some space in the stack [@jenny2022; @zigdocs].\nThe value of each function argument given to the function in this function call is stored in this\nstack space. Also, every local variable that you declare inside the function scope are\nnormally stored in this same stack space.\n\nLooking at the example below, the variable `result` is a local variable declared inside the scope of the `add()`\nfunction. Because of that, this variable is stored inside the stack space reserved for the `add()` function.\n\nAlso, the `r` variable (which is declared outside of the `add()` function scope) is also stored in the stack,\nspecially because it does not contain a value that is *compile-time known*.\n\n\n::: {.cell}\n\n```{.zig .cell-code}\nconst r = add(5, 27);\n_ = r;\n\nfn add(x: u8, y: u8) u8 {\n    const result = x + y;\n    return result;\n}\n```\n:::\n\n\nSo, any variable that you declare inside the scope of a function is always stored inside\nthe space that was reserved for that particular function in the stack memory. This\nalso counts for any variable declared inside the scope of your `main()` function. As you would expect, in this case, they\nare stored inside the stack space reserved for the `main()` function.\n\nOne very important detail about the stack memory is that **it frees itself automatically**.\nThis is very important, remember that. When variables are stored in the stack memory,\nyou don't have the work (or the responsibility) of freeing/destroying these objects.\nBecause they will be automatically destroyed once the stack space is freed at the end of the function scope.\n\n::: {.callout-important}\nVariables that are stored in the stack are automatically\nfreed/destroyed at the end of the function scope.\n:::\n\n\nAs I sad earlier, every time you make a function call in Zig, an amount of space in the stack memory is\nreserved for this particular function call. But once the function call returns (or ends, if you prefer to call it this way)\nthe space that was reserved in the stack is destroyed, and all of the variables that were in this space goes away with it.\nThis mechanism exists because this space, and the variables within it, are not necessary anymore,\nsince the function \"finished it's business\". Using the `add()` function that we exposed above as an example, it means that the variable `result` is automatically\ndestroyed once the function returns.\n\nOne important consequence of this mechanism is that, once the function returns, you can no longer access any memory\naddress that was inside the space in the stack reserved for this particular function. Because this space was\ndestroyed. This means that you can not make a function **return a pointer to one of it's local variables**.\n\nThink about that for a second. If all local variables are destroyed at the end of the function scope, why\nwould you even consider returning a pointer to one of these variables? This pointer is at best,\ninvalid, or, more likely, \"undefined\". So, yes, you should never write a function that returns a pointer to one\nof it's local variables.\n\nSo, using again the `add()` function as an example, if you rewrite this function so that it\nreturns a pointer to the local variable `result`, the `zig` compiler will actually compile\nyou program, with no warnings or erros. At first glance, it looks that this is good code\nthat works as expected. But this is a lie!\n\nIf you try to take a look at the value inside of the `r` variable,\nor, if you try to use this `r` variable in another expression\nor function call, then, you would have undefined behaviour, and major\nbugs in your program [@zigdocs, see \"Lifetime and Ownership\"[^life] and \"Undefined Behaviour\"[^undef] sections].\n\n[^life]: <https://ziglang.org/documentation/master/#Lifetime-and-Ownership>\n[^undef]: <https://ziglang.org/documentation/master/#Undefined-Behavior>\n\n\n\n::: {.cell}\n\n```{.zig .cell-code}\n// This code compiles succesfully. But it has\n// undefined behaviour. Never do this!!!\n\n// The `r` variable is undefined!\nconst r = add(5, 27);\n_ = r;\n\nfn add(x: u8, y: u8) *const u8 {\n    const result = x + y;\n    return &result;\n}\n```\n:::\n\n\nThis \"invalid pointer to stack variable\" problem is very known across many programming language communities.\nIf you try to do the same thing, for example, in a C or C++ program (i.e. returning an address to\na local variable stored in the stack), you would also get undefined behaviour\nin the program.\n\n::: {.callout-important}\nIf a local variable in your function is stored in the stack, you should never\nreturn a pointer to this local variable from the function. Because\nthis pointer will always become undefined after the function returns, since the stack space of the function\nis destroyed at the end of it's scope.\n:::\n\nBut what if you really need to use this local variable in some way after your function returns?\nHow can you do this? The answer is: \"in the same you would do if this was a C or C++ program. By returning\nan address to a variable stored in the heap\". The heap memory have a much more flexible lifecycle,\nand allows you to get a valid pointer to a local variable of a function that already returned\nfrom it's scope.\n\n\n### Heap\n\nWhile the stack accepts only variables whose length is known at compile-time, the heap is much more dinamic\n(and flexible) type of memory. It is the perfect type of memory to use\non variables whose size/length might grow during the execution of your program.\nVirtually any application that behaves as a server is a classic use case of the heap.\nA HTTP server, a SSH server, a DNS server, a LSP server, ... any type of server.\n\nIn summary, a server is a type of application that runs for long periods of time,\nand that serves (or \"deals with\") any incoming request that reaches this particular server.\nThe heap is a good choice for this type of system, mainly because the server does not know upfront\nhow many requests it will receive from users, while it is active. It could be one single request,\nor, 5 thousand requests, or, it could also be zero requests.\nThe server needs to have the ability to allocate and manage it's memory according to how many requests it receives.\n\nAnother key difference between the stack and the heap, is that the heap is a type\nof memory that you, the programmer, have complete control over. This makes the heap a\nmore flexible type of memory, but it also makes harder to work with it. Because you,\nthe programmer, is responsible for managing everything related to it. Including where the memory is allocated,\nhow much memory is allocated, and where this memory is freed.\n\n> Unlike stack memory, heap memory is allocated explicitly by programmers and it won’t be deallocated until it is explicitly freed [@jenny2022].\n\n\n\n\n### Summary\n\nAfter discussing all of these boring details, we can quickly recap what we learned.\nIn summary, the Zig compiler will use the following rules to decide where each\nvariable you declare is stored:\n\n1. every literal value (such as `\"this is string\"`, `10`, or `true`) is stored in the global data section.\n\n1. every constant variable (`const`) whose value **is known at compile-time** is also stored in the global data section.\n\n1. every variable (constant or not) whose value **is not known at compile time** is stored in the stack of the current scope.\n\n1. if a variable is created with the method `alloc()` or `create()` of an allocator object, this variable is stored in the memory space used by this particular allocator object. Most of allocators available in Zig use the heap memory, so, this variable is likely stored in the heap (`FixedBufferAllocator()` is an exception to that).\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}